{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS161085",
              "name": "ProblematicCFunctionDetectedMalloc",
              "shortDescription": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "fullDescription": {
                "text": "Problematic C function detected (malloc): If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md",
              "help": {
                "text": "calloc handles the most common integer math in memory allocation (# of elements * their size) with error handling to prevent overflows in most implementations, and zeros out memory",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS161085",
              "name": "ProblematicCFunctionDetectedMalloc",
              "shortDescription": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "fullDescription": {
                "text": "Problematic C function detected (malloc): If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md",
              "help": {
                "text": "calloc handles the most common integer math in memory allocation (# of elements * their size) with error handling to prevent overflows in most implementations, and zeros out memory",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS161085",
              "name": "ProblematicCFunctionDetectedMalloc",
              "shortDescription": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "fullDescription": {
                "text": "Problematic C function detected (malloc): If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md",
              "help": {
                "text": "calloc handles the most common integer math in memory allocation (# of elements * their size) with error handling to prevent overflows in most implementations, and zeros out memory",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS161085",
              "name": "ProblematicCFunctionDetectedMalloc",
              "shortDescription": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "fullDescription": {
                "text": "Problematic C function detected (malloc): If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md",
              "help": {
                "text": "calloc handles the most common integer math in memory allocation (# of elements * their size) with error handling to prevent overflows in most implementations, and zeros out memory",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS161085.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS121708",
              "name": "ProblematicCFunctionDetectedMemcpy",
              "shortDescription": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "fullDescription": {
                "text": "Problematic C function detected (memcpy): There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md",
              "help": {
                "text": "Use memcpy_s if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS121708.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "BestPractice",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS148264",
              "name": "DoNotUseWeaknoncryptographicRandomNumberGenerators",
              "shortDescription": {
                "text": "Use cryptographic random numbers generators for anything even close to a security function."
              },
              "fullDescription": {
                "text": "Do not use weak/non-cryptographic random number generators: Use cryptographic random numbers generators for anything even close to a security function."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md",
              "help": {
                "text": "Replacements depend on language.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS148264.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS137138",
              "name": "InsecureUrl",
              "shortDescription": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "fullDescription": {
                "text": "Insecure URL: An HTTP-based URL without TLS was detected."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md",
              "help": {
                "text": "Update to an HTTPS-based URL if possible.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS137138.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning"
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "DS154189",
              "name": "BannedCFunctionDetected",
              "shortDescription": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "fullDescription": {
                "text": "Banned C function detected: These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md",
              "help": {
                "text": "These functions are historically error-prone and have been associated with a significant number of vulnerabilities. Most of these functions have safer alternatives, such as replacing 'strcpy' with 'strlcpy' or 'strcpy_s'.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS154189.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Moderate",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS154189"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of non-cryptographic or weak random number generators to generate values that are intended to be unpredictable. This can lead to a variety of security issues, as attackers may be able to predict the generated values and exploit this predictability.\n\nNon-cryptographic random number generators, such as `rand()`, are not designed to be unpredictable and can produce predictable sequences of numbers. This can be exploited by an attacker to predict future numbers that will be generated by the random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographic random number generator, such as `std::random_device`, `std::mt19937`, `std::uniform_int_distribution`, etc. These generators are designed to be unpredictable and are suitable for generating random numbers in a security context.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use `std::random_device` and `std::uniform_int_distribution` to generate a random number:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 6);\n\nint random_number = distr(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister pseudo-random number generator (`std::mt19937`), and `std::uniform_int_distribution` is used to generate a random number in the range [1, 6].\n\n## Library Dependencies\n\nThe above code requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                },
                "region": {
                  "startLine": 3720,
                  "startColumn": 9,
                  "endLine": 3720,
                  "endColumn": 17,
                  "charOffset": 162930,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of non-cryptographic or weak random number generators to generate values that are intended to be unpredictable. This can lead to a variety of security issues, as attackers may be able to predict the generated values and exploit this predictability.\n\nNon-cryptographic random number generators, such as `rand()`, are not designed to be unpredictable and can produce predictable sequences of numbers. This can be exploited by an attacker to predict future numbers that will be generated by the random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographic random number generator, such as `std::random_device`, `std::mt19937`, `std::uniform_int_distribution`, etc. These generators are designed to be unpredictable and are suitable for generating random numbers in a security context.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use `std::random_device` and `std::uniform_int_distribution` to generate a random number:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 6);\n\nint random_number = distr(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister pseudo-random number generator (`std::mt19937`), and `std::uniform_int_distribution` is used to generate a random number in the range [1, 6].\n\n## Library Dependencies\n\nThe above code requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                },
                "region": {
                  "startLine": 3724,
                  "startColumn": 9,
                  "endLine": 3724,
                  "endColumn": 17,
                  "charOffset": 163045,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of non-cryptographic or weak random number generators to generate values that are intended to be unpredictable. This can lead to a variety of security issues, as attackers may be able to predict the generated values and exploit this predictability.\n\nNon-cryptographic random number generators, such as `rand()`, are not designed to be unpredictable and can produce predictable sequences of numbers. This can be exploited by an attacker to predict future numbers that will be generated by the random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographic random number generator, such as `std::random_device`, `std::mt19937`, `std::uniform_int_distribution`, etc. These generators are designed to be unpredictable and are suitable for generating random numbers in a security context.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use `std::random_device` and `std::uniform_int_distribution` to generate a random number:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 6);\n\nint random_number = distr(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister pseudo-random number generator (`std::mt19937`), and `std::uniform_int_distribution` is used to generate a random number in the range [1, 6].\n\n## Library Dependencies\n\nThe above code requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                },
                "region": {
                  "startLine": 3710,
                  "startColumn": 29,
                  "endLine": 3710,
                  "endColumn": 37,
                  "charOffset": 162574,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. As a result, there is no evidence of a vulnerability or a false positive. If this is an error, please provide a valid SAST finding for analysis.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                },
                "region": {
                  "startLine": 1909,
                  "startColumn": 2,
                  "endLine": 1909,
                  "endColumn": 32,
                  "charOffset": 87936,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(to, &from, sizeof(from)",
                    "rendered": {
                      "text": "memcpy(to, &from, sizeof(from)",
                      "markdown": "`memcpy(to, &from, sizeof(from)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 87936,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(to, <size of to>,  &from,  sizeof(from)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS161085",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (malloc)",
            "markdown": "The input does not contain any data to analyze. As a result, there is no evidence of a genuine vulnerability. In the absence of any classification or code context, this is considered a likely false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/misc/lapacke.h"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 31,
                  "endLine": 113,
                  "endColumn": 45,
                  "charOffset": 3658,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc( size )",
                    "rendered": {
                      "text": "malloc( size )",
                      "markdown": "`malloc( size )`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/misc/lapacke.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3658,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "The input provided is empty or null, which means there is no information about a buffer operation to analyze. Without any data, it is not possible to determine if there is a vulnerability or estimate the likelihood of a false positive. Please provide a valid SAST finding for analysis.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                },
                "region": {
                  "startLine": 1878,
                  "startColumn": 2,
                  "endLine": 1878,
                  "endColumn": 32,
                  "charOffset": 85886,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(to, &from, sizeof(from)",
                    "rendered": {
                      "text": "memcpy(to, &from, sizeof(from)",
                      "markdown": "`memcpy(to, &from, sizeof(from)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 85886,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(to, <size of to>,  &from,  sizeof(from)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Please supply a valid SAST finding object to receive a triage assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                },
                "region": {
                  "startLine": 1724,
                  "startColumn": 2,
                  "endLine": 1724,
                  "endColumn": 38,
                  "charOffset": 78190,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(&res, from, sizeof(Packet4uc)",
                    "rendered": {
                      "text": "memcpy(&res, from, sizeof(Packet4uc)",
                      "markdown": "`memcpy(&res, from, sizeof(Packet4uc)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 78190,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&res, <size of &res>,  from,  sizeof(Packet4uc)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Without any information about the code, buffer operation, or context, it is not possible to determine if there is a genuine vulnerability or a false positive. Please provide a valid SAST finding for assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                },
                "region": {
                  "startLine": 1872,
                  "startColumn": 2,
                  "endLine": 1872,
                  "endColumn": 32,
                  "charOffset": 85493,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(to, &from, sizeof(from)",
                    "rendered": {
                      "text": "memcpy(to, &from, sizeof(from)",
                      "markdown": "`memcpy(to, &from, sizeof(from)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 85493,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(to, <size of to>,  &from,  sizeof(from)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                },
                "region": {
                  "startLine": 1714,
                  "startColumn": 2,
                  "endLine": 1714,
                  "endColumn": 37,
                  "charOffset": 77772,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(&res, from, sizeof(Packet4c)",
                    "rendered": {
                      "text": "memcpy(&res, from, sizeof(Packet4c)",
                      "markdown": "`memcpy(&res, from, sizeof(Packet4c)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 77772,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&res, <size of &res>,  from,  sizeof(Packet4c)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                },
                "region": {
                  "startLine": 1679,
                  "startColumn": 2,
                  "endLine": 1679,
                  "endColumn": 38,
                  "charOffset": 75784,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(&res, from, sizeof(Packet4uc)",
                    "rendered": {
                      "text": "memcpy(&res, from, sizeof(Packet4uc)",
                      "markdown": "`memcpy(&res, from, sizeof(Packet4uc)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 75784,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&res, <size of &res>,  from,  sizeof(Packet4uc)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Without a valid finding, there is no evidence of a vulnerability or a false positive. Please provide a valid SAST finding for assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                },
                "region": {
                  "startLine": 1669,
                  "startColumn": 2,
                  "endLine": 1669,
                  "endColumn": 37,
                  "charOffset": 75373,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(&res, from, sizeof(Packet4c)",
                    "rendered": {
                      "text": "memcpy(&res, from, sizeof(Packet4c)",
                      "markdown": "`memcpy(&res, from, sizeof(Packet4c)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/NEON/PacketMath.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 75373,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&res, <size of &res>,  from,  sizeof(Packet4c)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 4,
                  "endLine": 120,
                  "endColumn": 23,
                  "charOffset": 3945,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(dst, src, n)",
                    "rendered": {
                      "text": "memcpy(dst, src, n)",
                      "markdown": "`memcpy(dst, src, n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3945,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Without a finding to evaluate, there is no evidence of a vulnerability or risk. Please provide a valid SAST finding for assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 8,
                  "endLine": 111,
                  "endColumn": 43,
                  "charOffset": 3652,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(dst_ptr, src_ptr, blocksize)",
                    "rendered": {
                      "text": "memcpy(dst_ptr, src_ptr, blocksize)",
                      "markdown": "`memcpy(dst_ptr, src_ptr, blocksize)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3652,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst_ptr, <size of dst_ptr>,  src_ptr,  blocksize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, context, or classification, this is treated as a non-genuine finding. If this is an error or missing input, please provide a valid SAST finding for analysis.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 4,
                  "endLine": 117,
                  "endColumn": 23,
                  "charOffset": 3824,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(dst, src, n)",
                    "rendered": {
                      "text": "memcpy(dst, src, n)",
                      "markdown": "`memcpy(dst, src, n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3824,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 8,
                  "endLine": 97,
                  "endColumn": 27,
                  "charOffset": 2990,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(dst, src, n)",
                    "rendered": {
                      "text": "memcpy(dst, src, n)",
                      "markdown": "`memcpy(dst, src, n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2990,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Please supply a valid SAST finding object to receive a triage assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 6,
                  "endLine": 88,
                  "endColumn": 25,
                  "charOffset": 2524,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(dst, src, n)",
                    "rendered": {
                      "text": "memcpy(dst, src, n)",
                      "markdown": "`memcpy(dst, src, n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2524,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. As a result, there is no evidence of a vulnerability or a safe condition. This may be due to an error in the analysis or missing input. Manual review is required to determine if there is any issue present.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 27,
                  "endLine": 86,
                  "endColumn": 71,
                  "charOffset": 2446,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(void* dst, const void* src, size_t n)",
                    "rendered": {
                      "text": "memcpy(void* dst, const void* src, size_t n)",
                      "markdown": "`memcpy(void* dst, const void* src, size_t n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2446,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(void* dst, <size of void* dst>,  const void* src,  size_t n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of non-cryptographic or weak random number generators to generate values that are intended to be unpredictable. This can lead to a variety of security issues, as attackers may be able to predict the generated values and exploit this predictability.\n\nNon-cryptographic random number generators, such as `rand()`, are not designed to be unpredictable and can produce predictable sequences of numbers. This can be exploited by an attacker to predict future numbers that will be generated by the random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographic random number generator, such as `std::random_device`, `std::mt19937`, `std::uniform_int_distribution`, etc. These generators are designed to be unpredictable and are suitable for generating random numbers in a security context.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use `std::random_device` and `std::uniform_int_distribution` to generate a random number:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 6);\n\nint random_number = distr(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister pseudo-random number generator (`std::mt19937`), and `std::uniform_int_distribution` is used to generate a random number in the range [1, 6].\n\n## Library Dependencies\n\nThe above code requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorBase.h"
                },
                "region": {
                  "startLine": 1145,
                  "startColumn": 4,
                  "endLine": 1145,
                  "endColumn": 12,
                  "charOffset": 56648,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of non-cryptographic or weak random number generators to generate values that are intended to be unpredictable. This can lead to a variety of security issues, as attackers may be able to predict the generated values and exploit this predictability.\n\nNon-cryptographic random number generators, such as `rand()`, are not designed to be unpredictable and can produce predictable sequences of numbers. This can be exploited by an attacker to predict future numbers that will be generated by the random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographic random number generator, such as `std::random_device`, `std::mt19937`, `std::uniform_int_distribution`, etc. These generators are designed to be unpredictable and are suitable for generating random numbers in a security context.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use `std::random_device` and `std::uniform_int_distribution` to generate a random number:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 6);\n\nint random_number = distr(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister pseudo-random number generator (`std::mt19937`), and `std::uniform_int_distribution` is used to generate a random number in the range [1, 6].\n\n## Library Dependencies\n\nThe above code requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorBase.h"
                },
                "region": {
                  "startLine": 1140,
                  "startColumn": 4,
                  "endLine": 1140,
                  "endColumn": 12,
                  "charOffset": 56406,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of non-cryptographic or weak random number generators to generate values that are intended to be unpredictable. This can lead to a variety of security issues, as attackers may be able to predict the generated values and exploit this predictability.\n\nNon-cryptographic random number generators, such as `rand()`, are not designed to be unpredictable and can produce predictable sequences of numbers. This can be exploited by an attacker to predict future numbers that will be generated by the random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographic random number generator, such as `std::random_device`, `std::mt19937`, `std::uniform_int_distribution`, etc. These generators are designed to be unpredictable and are suitable for generating random numbers in a security context.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use `std::random_device` and `std::uniform_int_distribution` to generate a random number:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 6);\n\nint random_number = distr(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister pseudo-random number generator (`std::mt19937`), and `std::uniform_int_distribution` is used to generate a random number in the range [1, 6].\n\n## Library Dependencies\n\nThe above code requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorBase.h"
                },
                "region": {
                  "startLine": 934,
                  "startColumn": 4,
                  "endLine": 934,
                  "endColumn": 12,
                  "charOffset": 46282,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. As a result, there is no evidence of a vulnerability or risk. This is considered a likely false positive due to the absence of any information to analyze.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/AltiVec/PacketMath.h"
                },
                "region": {
                  "startLine": 2955,
                  "startColumn": 2,
                  "endLine": 2955,
                  "endColumn": 29,
                  "charOffset": 111454,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(tmp, &x, sizeof(tmp)",
                    "rendered": {
                      "text": "memcpy(tmp, &x, sizeof(tmp)",
                      "markdown": "`memcpy(tmp, &x, sizeof(tmp)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/AltiVec/PacketMath.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 111454,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(tmp, <size of tmp>,  &x,  sizeof(tmp)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. As a result, there is no evidence of a vulnerability or a safe condition. This case requires manual review to determine if there is any issue present.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/AltiVec/PacketMath.h"
                },
                "region": {
                  "startLine": 2945,
                  "startColumn": 2,
                  "endLine": 2945,
                  "endColumn": 29,
                  "charOffset": 111197,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(tmp, &x, sizeof(tmp)",
                    "rendered": {
                      "text": "memcpy(tmp, &x, sizeof(tmp)",
                      "markdown": "`memcpy(tmp, &x, sizeof(tmp)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/AltiVec/PacketMath.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 111197,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(tmp, <size of tmp>,  &x,  sizeof(tmp)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. As a result, there is no evidence of a vulnerability or risk in the code. This is considered a likely false positive due to the absence of any input to analyze.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorEvaluator.h"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 15,
                  "endLine": 274,
                  "endColumn": 90,
                  "charOffset": 10690,
                  "charLength": 75,
                  "snippet": {
                    "text": "memcpy((void*)(m_device.get(data)),m_device.get(m_data), m_dims.TotalSize()",
                    "rendered": {
                      "text": "memcpy((void*)(m_device.get(data)),m_device.get(m_data), m_dims.TotalSize()",
                      "markdown": "`memcpy((void*)(m_device.get(data)),m_device.get(m_data), m_dims.TotalSize()`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorEvaluator.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10690,
                        "charLength": 75
                      },
                      "insertedContent": {
                        "text": "memcpy_s((void*)(m_device.get(data)), <size of (void*)(m_device.get(data))>, m_device.get(m_data),  m_dims.TotalSize()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorEvaluator.h"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 15,
                  "endLine": 79,
                  "endColumn": 91,
                  "charOffset": 3118,
                  "charLength": 76,
                  "snippet": {
                    "text": "memcpy((void*)(m_device.get(dest)), m_device.get(m_data), m_dims.TotalSize()",
                    "rendered": {
                      "text": "memcpy((void*)(m_device.get(dest)), m_device.get(m_data), m_dims.TotalSize()",
                      "markdown": "`memcpy((void*)(m_device.get(dest)), m_device.get(m_data), m_dims.TotalSize()`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorEvaluator.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3118,
                        "charLength": 76
                      },
                      "insertedContent": {
                        "text": "memcpy_s((void*)(m_device.get(dest)), <size of (void*)(m_device.get(dest))>,  m_device.get(m_data),  m_dims.TotalSize()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured Web Link Vulnerability",
            "markdown": "## Description\n\nUnsecured Web Link Vulnerability refers to the security risk associated with the use of unsecured HTTP links in a C++ program. When a program uses an unsecured HTTP link, it exposes the data being transmitted to potential interception, manipulation, or theft. This is because HTTP traffic is not encrypted, unlike HTTPS traffic. This vulnerability can lead to serious security breaches, including data leakage, session hijacking, and man-in-the-middle attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure HTTPS links instead of HTTP. HTTPS encrypts the data being transmitted, making it much more difficult for attackers to intercept or manipulate it. Additionally, validate all URLs and do not trust user input without validation.\n\n## Source Code Fix Recommendation\n\nReplace the unsecured HTTP link with a secure HTTPS link:\n\n```cpp\n// Vulnerable code\nstd::string url = \"http://mozilla.org\";\n\n// Recommended fix\nstd::string url = \"https://mozilla.org\";\n```\n\n## Library Dependencies\n\nThe specific code example does not require any library dependencies to execute properly.\n\n## References\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 41,
                  "endLine": 8,
                  "endColumn": 59,
                  "charOffset": 336,
                  "charLength": 18,
                  "snippet": {
                    "text": "http://mozilla.org",
                    "rendered": {
                      "text": "http://mozilla.org",
                      "markdown": "`http://mozilla.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 336,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "https://mozilla.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided for analysis. As a result, there is no evidence of a vulnerability or risk in the code. If this is an error or missing input, please provide a valid SAST finding for review.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorFFT.h"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 19,
                  "endLine": 297,
                  "endColumn": 85,
                  "charOffset": 11946,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(&buf[base_offset], line_buf, line_len*sizeof(ComplexScalar)",
                    "rendered": {
                      "text": "memcpy(&buf[base_offset], line_buf, line_len*sizeof(ComplexScalar)",
                      "markdown": "`memcpy(&buf[base_offset], line_buf, line_len*sizeof(ComplexScalar)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorFFT.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11946,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&buf[base_offset], <size of &buf[base_offset]>,  line_buf,  line_len*sizeof(ComplexScalar)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured Web Link Vulnerability",
            "markdown": "## Description\n\nUnsecured Web Link Vulnerability refers to the security risk associated with the use of unsecured HTTP links in a C++ program. When a program uses an unsecured HTTP link, it exposes the data being transmitted to potential interception, manipulation, or theft. This is because HTTP traffic is not encrypted, unlike HTTPS traffic. This vulnerability can lead to serious security breaches, including data leakage, session hijacking, and man-in-the-middle attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure HTTPS links instead of HTTP. HTTPS encrypts the data being transmitted, making it much more difficult for attackers to intercept or manipulate it. Additionally, validate all URLs and do not trust user input without validation.\n\n## Source Code Fix Recommendation\n\nReplace the unsecured HTTP link with a secure HTTPS link:\n\n```cpp\n// Vulnerable code\nstd::string url = \"http://mozilla.org\";\n\n// Recommended fix\nstd::string url = \"https://mozilla.org\";\n```\n\n## Library Dependencies\n\nThe specific code example does not require any library dependencies to execute properly.\n\n## References\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/Default/Half.h"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 41,
                  "endLine": 6,
                  "endColumn": 59,
                  "charOffset": 264,
                  "charLength": 18,
                  "snippet": {
                    "text": "http://mozilla.org",
                    "rendered": {
                      "text": "http://mozilla.org",
                      "markdown": "`http://mozilla.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/Default/Half.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 264,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "https://mozilla.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability",
            "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates the URL before it's used in a network operation. This can lead to various security issues such as remote file inclusion (RFI), local file inclusion (LFI), path traversal and others. Attackers can manipulate the URL to gain unauthorized access to files or execute malicious scripts.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to:\n\n- Always validate URLs before using them in network operations.\n- Use a whitelist of approved URLs.\n- Avoid using user-supplied URLs when possible.\n- Use secure functions that can handle URLs correctly.\n\n## Source Code Fix Recommendation\n\nThe specific vulnerability sink in the provided URL is not clear as the URL is a homepage of a project. However, here is a general example of how to validate a URL in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string &url)\n{\n    std::regex url_regex(\n        R\"(^https?://([\\w-]+.)+[\\w-]+(/[\\w- ./?%&=]*)?$)\",\n        std::regex::extended\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nThis function uses a regular expression to check if the URL is valid. It only allows HTTP and HTTPS protocols and does not allow any special characters in the URL that could be used for attacks.\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<regex>`: for regular expression support.\n- `<string>`: for string manipulation functions.\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/Default/Half.h"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 70,
                  "endLine": 227,
                  "endColumn": 97,
                  "charOffset": 10185,
                  "charLength": 27,
                  "snippet": {
                    "text": "http://half.sourceforge.net",
                    "rendered": {
                      "text": "http://half.sourceforge.net",
                      "markdown": "`http://half.sourceforge.net`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/Default/Half.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10185,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "https://half.sourceforge.net"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorFFT.h"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 19,
                  "endLine": 279,
                  "endColumn": 85,
                  "charOffset": 11333,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(line_buf, &buf[base_offset], line_len*sizeof(ComplexScalar)",
                    "rendered": {
                      "text": "memcpy(line_buf, &buf[base_offset], line_len*sizeof(ComplexScalar)",
                      "markdown": "`memcpy(line_buf, &buf[base_offset], line_len*sizeof(ComplexScalar)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorFFT.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11333,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(line_buf, <size of line_buf>,  &buf[base_offset],  line_len*sizeof(ComplexScalar)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of non-cryptographic or weak random number generators to generate values that are intended to be unpredictable. This can lead to a variety of security issues, as attackers may be able to predict the generated values and exploit this predictability.\n\nNon-cryptographic random number generators, such as `rand()`, are not designed to be unpredictable and can produce predictable sequences of numbers. This can be exploited by an attacker to predict future numbers that will be generated by the random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographic random number generator, such as `std::random_device`, `std::mt19937`, `std::uniform_int_distribution`, etc. These generators are designed to be unpredictable and are suitable for generating random numbers in a security context.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use `std::random_device` and `std::uniform_int_distribution` to generate a random number:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(1, 6);\n\nint random_number = distr(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister pseudo-random number generator (`std::mt19937`), and `std::uniform_int_distribution` is used to generate a random number in the range [1, 6].\n\n## Library Dependencies\n\nThe above code requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorIO.h"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 54,
                  "endLine": 145,
                  "endColumn": 62,
                  "charOffset": 4940,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured Web Link Vulnerability",
            "markdown": "## Description\n\nUnsecured Web Link Vulnerability refers to the security risk associated with the use of unsecured HTTP links in a C++ program. When a program uses an unsecured HTTP link, it exposes the data being transmitted to potential interception, manipulation, or theft. This is because HTTP traffic is not encrypted, unlike HTTPS traffic. This vulnerability can lead to serious security breaches, including data leakage, session hijacking, and man-in-the-middle attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure HTTPS links instead of HTTP. HTTPS encrypts the data being transmitted, making it much more difficult for attackers to intercept or manipulate it. Additionally, validate all URLs and do not trust user input without validation.\n\n## Source Code Fix Recommendation\n\nReplace the unsecured HTTP link with a secure HTTPS link:\n\n```cpp\n// Vulnerable code\nstd::string url = \"http://mozilla.org\";\n\n// Recommended fix\nstd::string url = \"https://mozilla.org\";\n```\n\n## Library Dependencies\n\nThe specific code example does not require any library dependencies to execute properly.\n\n## References\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorIO.h"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 41,
                  "endLine": 8,
                  "endColumn": 59,
                  "charOffset": 336,
                  "charLength": 18,
                  "snippet": {
                    "text": "http://mozilla.org",
                    "rendered": {
                      "text": "http://mozilla.org",
                      "markdown": "`http://mozilla.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorIO.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 336,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "https://mozilla.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the use of weak or non-cryptographic random number generators can lead to vulnerabilities. This is because these generators can produce predictable values, which can be exploited by an attacker to guess the generated values. This can lead to a variety of security issues, such as session prediction, password cracking, and other forms of information leakage.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong, cryptographic random number generator. In C++, this can be achieved by using the `<random>` library, which provides a variety of generators that produce high-quality random numbers. \n\n## Source Code Fix Recommendation\n\nInstead of using `rand()`, use `std::random_device` and `std::mt19937` from the `<random>` library. Here is an example:\n\n```cpp\n#include <random>\n\nstd::random_device rd;  // Will be used to obtain a seed for the random number engine\nstd::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()\nstd::uniform_int_distribution<> distrib(1, 6);\n\nint random_number = distrib(gen);\n```\n\n## Library Dependencies\n\nThe above code requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/ThreadPool/NonBlockingThreadPool.h"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 40,
                  "endLine": 220,
                  "endColumn": 45,
                  "charOffset": 7739,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured Web Link Vulnerability",
            "markdown": "## Description\n\nUnsecured Web Link Vulnerability refers to the security risk associated with the use of unsecured HTTP links in a C++ program. When a program uses an unsecured HTTP link, it exposes the data being transmitted to potential interception, manipulation, or theft. This is because HTTP traffic is not encrypted, unlike HTTPS traffic. This vulnerability can lead to serious security breaches, including data leakage, session hijacking, and man-in-the-middle attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure HTTPS links instead of HTTP. HTTPS encrypts the data being transmitted, making it much more difficult for attackers to intercept or manipulate it. Additionally, validate all URLs and do not trust user input without validation.\n\n## Source Code Fix Recommendation\n\nReplace the unsecured HTTP link with a secure HTTPS link:\n\n```cpp\n// Vulnerable code\nstd::string url = \"http://mozilla.org\";\n\n// Recommended fix\nstd::string url = \"https://mozilla.org\";\n```\n\n## Library Dependencies\n\nThe specific code example does not require any library dependencies to execute properly.\n\n## References\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/ThreadPool/NonBlockingThreadPool.h"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 41,
                  "endLine": 8,
                  "endColumn": 59,
                  "charOffset": 324,
                  "charLength": 18,
                  "snippet": {
                    "text": "http://mozilla.org",
                    "rendered": {
                      "text": "http://mozilla.org",
                      "markdown": "`http://mozilla.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/ThreadPool/NonBlockingThreadPool.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 324,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "https://mozilla.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Without any information about the code, buffer operation, or context, it is not possible to determine if there is a genuine vulnerability or a false positive. Please provide a valid SAST finding for assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorMorphing.h"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 19,
                  "endLine": 518,
                  "endColumn": 119,
                  "charOffset": 20415,
                  "charLength": 100,
                  "snippet": {
                    "text": "memcpy((void*)(m_device.get(data + i)), m_device.get(src+offset), contiguous_values * sizeof(Scalar)",
                    "rendered": {
                      "text": "memcpy((void*)(m_device.get(data + i)), m_device.get(src+offset), contiguous_values * sizeof(Scalar)",
                      "markdown": "`memcpy((void*)(m_device.get(data + i)), m_device.get(src+offset), contiguous_values * sizeof(Scalar)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorMorphing.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20415,
                        "charLength": 100
                      },
                      "insertedContent": {
                        "text": "memcpy_s((void*)(m_device.get(data + i)), <size of (void*)(m_device.get(data + i))>,  m_device.get(src+offset),  contiguous_values * sizeof(Scalar)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability",
            "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates the URL before it's used in a network operation. This can lead to various security issues such as remote file inclusion (RFI), local file inclusion (LFI), path traversal and others. Attackers can manipulate the URL to gain unauthorized access to files or execute malicious scripts.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to:\n\n- Always validate URLs before using them in network operations.\n- Use a whitelist of approved URLs.\n- Avoid using user-supplied URLs when possible.\n- Use secure functions that can handle URLs correctly.\n\n## Source Code Fix Recommendation\n\nThe specific vulnerability sink in the provided URL is not clear as the URL is a homepage of a project. However, here is a general example of how to validate a URL in C++:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidURL(const std::string &url)\n{\n    std::regex url_regex(\n        R\"(^https?://([\\w-]+.)+[\\w-]+(/[\\w- ./?%&=]*)?$)\",\n        std::regex::extended\n    );\n    return std::regex_match(url, url_regex);\n}\n```\n\nThis function uses a regular expression to check if the URL is valid. It only allows HTTP and HTTPS protocols and does not allow any special characters in the URL that could be used for attacks.\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<regex>`: for regular expression support.\n- `<string>`: for string manipulation functions.\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/arch/Default/Half.h"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 70,
                  "endLine": 226,
                  "endColumn": 97,
                  "charOffset": 10024,
                  "charLength": 27,
                  "snippet": {
                    "text": "http://half.sourceforge.net",
                    "rendered": {
                      "text": "http://half.sourceforge.net",
                      "markdown": "`http://half.sourceforge.net`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/arch/Default/Half.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10024,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "https://half.sourceforge.net"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceDefault.h"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 23,
                  "charOffset": 1480,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(dst, src, n)",
                    "rendered": {
                      "text": "memcpy(dst, src, n)",
                      "markdown": "`memcpy(dst, src, n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceDefault.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1480,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured Web Link Vulnerability",
            "markdown": "## Description\n\nUnsecured Web Link Vulnerability refers to the security risk associated with the use of unsecured HTTP links in a C++ program. When a program uses an unsecured HTTP link, it exposes the data being transmitted to potential interception, manipulation, or theft. This is because HTTP traffic is not encrypted, unlike HTTPS traffic. This vulnerability can lead to serious security breaches, including data leakage, session hijacking, and man-in-the-middle attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure HTTPS links instead of HTTP. HTTPS encrypts the data being transmitted, making it much more difficult for attackers to intercept or manipulate it. Additionally, validate all URLs and do not trust user input without validation.\n\n## Source Code Fix Recommendation\n\nReplace the unsecured HTTP link with a secure HTTPS link:\n\n```cpp\n// Vulnerable code\nstd::string url = \"http://mozilla.org\";\n\n// Recommended fix\nstd::string url = \"https://mozilla.org\";\n```\n\n## Library Dependencies\n\nThe specific code example does not require any library dependencies to execute properly.\n\n## References\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceDefault.h"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 41,
                  "endLine": 8,
                  "endColumn": 59,
                  "charOffset": 336,
                  "charLength": 18,
                  "snippet": {
                    "text": "http://mozilla.org",
                    "rendered": {
                      "text": "http://mozilla.org",
                      "markdown": "`http://mozilla.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceDefault.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 336,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "https://mozilla.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a likely false positive due to the absence of any actionable details.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceDefault.h"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 4,
                  "endLine": 36,
                  "endColumn": 23,
                  "charOffset": 1341,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(dst, src, n)",
                    "rendered": {
                      "text": "memcpy(dst, src, n)",
                      "markdown": "`memcpy(dst, src, n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceDefault.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1341,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceGpu.h"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 45,
                  "endLine": 264,
                  "endColumn": 89,
                  "charOffset": 8824,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(void* dst, const void* src, size_t n)",
                    "rendered": {
                      "text": "memcpy(void* dst, const void* src, size_t n)",
                      "markdown": "`memcpy(void* dst, const void* src, size_t n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceGpu.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8824,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(void* dst, <size of void* dst>,  const void* src,  size_t n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured Web Link Vulnerability",
            "markdown": "## Description\n\nUnsecured Web Link Vulnerability refers to the security risk associated with the use of unsecured HTTP links in a C++ program. When a program uses an unsecured HTTP link, it exposes the data being transmitted to potential interception, manipulation, or theft. This is because HTTP traffic is not encrypted, unlike HTTPS traffic. This vulnerability can lead to serious security breaches, including data leakage, session hijacking, and man-in-the-middle attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure HTTPS links instead of HTTP. HTTPS encrypts the data being transmitted, making it much more difficult for attackers to intercept or manipulate it. Additionally, validate all URLs and do not trust user input without validation.\n\n## Source Code Fix Recommendation\n\nReplace the unsecured HTTP link with a secure HTTPS link:\n\n```cpp\n// Vulnerable code\nstd::string url = \"http://mozilla.org\";\n\n// Recommended fix\nstd::string url = \"https://mozilla.org\";\n```\n\n## Library Dependencies\n\nThe specific code example does not require any library dependencies to execute properly.\n\n## References\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceGpu.h"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 41,
                  "endLine": 8,
                  "endColumn": 59,
                  "charOffset": 336,
                  "charLength": 18,
                  "snippet": {
                    "text": "http://mozilla.org",
                    "rendered": {
                      "text": "http://mozilla.org",
                      "markdown": "`http://mozilla.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceGpu.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 336,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "https://mozilla.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a likely false positive due to the absence of any actionable details.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceDefault.h"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 6,
                  "endLine": 33,
                  "endColumn": 25,
                  "charOffset": 1202,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(dst, src, n)",
                    "rendered": {
                      "text": "memcpy(dst, src, n)",
                      "markdown": "`memcpy(dst, src, n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceDefault.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1202,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceDefault.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 45,
                  "endLine": 32,
                  "endColumn": 89,
                  "charOffset": 1143,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(void* dst, const void* src, size_t n)",
                    "rendered": {
                      "text": "memcpy(void* dst, const void* src, size_t n)",
                      "markdown": "`memcpy(void* dst, const void* src, size_t n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceDefault.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1143,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(void* dst, <size of void* dst>,  const void* src,  size_t n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured Web Link Vulnerability",
            "markdown": "## Description\n\nUnsecured Web Link Vulnerability refers to the security risk associated with the use of unsecured HTTP links in a C++ program. When a program uses an unsecured HTTP link, it exposes the data being transmitted to potential interception, manipulation, or theft. This is because HTTP traffic is not encrypted, unlike HTTPS traffic. This vulnerability can lead to serious security breaches, including data leakage, session hijacking, and man-in-the-middle attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure HTTPS links instead of HTTP. HTTPS encrypts the data being transmitted, making it much more difficult for attackers to intercept or manipulate it. Additionally, validate all URLs and do not trust user input without validation.\n\n## Source Code Fix Recommendation\n\nReplace the unsecured HTTP link with a secure HTTPS link:\n\n```cpp\n// Vulnerable code\nstd::string url = \"http://mozilla.org\";\n\n// Recommended fix\nstd::string url = \"https://mozilla.org\";\n```\n\n## Library Dependencies\n\nThe specific code example does not require any library dependencies to execute properly.\n\n## References\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceSycl.h"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 41,
                  "endLine": 13,
                  "endColumn": 59,
                  "charOffset": 490,
                  "charLength": 18,
                  "snippet": {
                    "text": "http://mozilla.org",
                    "rendered": {
                      "text": "http://mozilla.org",
                      "markdown": "`http://mozilla.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceSycl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 490,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "https://mozilla.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided for analysis. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Serializer.h"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 4,
                  "endLine": 117,
                  "endColumn": 41,
                  "charOffset": 4127,
                  "charLength": 37,
                  "snippet": {
                    "text": "memcpy(value.data(), src, data_bytes)",
                    "rendered": {
                      "text": "memcpy(value.data(), src, data_bytes)",
                      "markdown": "`memcpy(value.data(), src, data_bytes)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/util/Serializer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4127,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "memcpy_s(value.data(), <size of value.data()>,  src,  data_bytes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Without any information about the code, buffer operation, or context, it is not possible to determine if there is a genuine vulnerability or a false positive. Please provide a valid SAST finding for assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Serializer.h"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 4,
                  "endLine": 112,
                  "endColumn": 38,
                  "charOffset": 3875,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(&header, src, header_bytes)",
                    "rendered": {
                      "text": "memcpy(&header, src, header_bytes)",
                      "markdown": "`memcpy(&header, src, header_bytes)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/util/Serializer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3875,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&header, <size of &header>,  src,  header_bytes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Serializer.h"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 4,
                  "endLine": 102,
                  "endColumn": 42,
                  "charOffset": 3454,
                  "charLength": 38,
                  "snippet": {
                    "text": "memcpy(dest, value.data(), data_bytes)",
                    "rendered": {
                      "text": "memcpy(dest, value.data(), data_bytes)",
                      "markdown": "`memcpy(dest, value.data(), data_bytes)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/util/Serializer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3454,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest, <size of dest>,  value.data(),  data_bytes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)",
            "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from a source address to a destination address. A vulnerability can occur when the size of the destination buffer is less than the size of the source buffer. This can lead to a buffer overflow, which can cause the program to crash or, in some cases, allow an attacker to execute arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that the destination buffer is large enough to hold the data being copied from the source buffer. This can be done by checking the size of the destination buffer before calling `memcpy`. If the size of the source buffer is larger than the destination buffer, do not proceed with the copy operation.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix for the vulnerability:\n\n```cpp\n#include <cstring>\n\nvoid safe_memcpy(void *dst, size_t dst_size, const void *src, size_t n) {\n    if (n > dst_size) {\n        // Handle the error, e.g., terminate the program.\n        throw std::runtime_error(\"Source buffer is larger than destination buffer.\");\n    }\n    memcpy(dst, src, n);\n}\n```\n\n## Library Dependencies\n\nThe `memcpy` function is part of the C standard library, so no additional libraries are needed.\n\n## OWASP Resources\n\n- [Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceSycl.h"
                },
                "region": {
                  "startLine": 1009,
                  "startColumn": 20,
                  "endLine": 1009,
                  "endColumn": 39,
                  "charOffset": 39420,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(dst, src, n)",
                    "rendered": {
                      "text": "memcpy(dst, src, n)",
                      "markdown": "`memcpy(dst, src, n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceSycl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 39420,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided for analysis. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a likely false positive due to the absence of any actionable details.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Serializer.h"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 4,
                  "endLine": 100,
                  "endColumn": 39,
                  "charOffset": 3387,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(dest, &header, header_bytes)",
                    "rendered": {
                      "text": "memcpy(dest, &header, header_bytes)",
                      "markdown": "`memcpy(dest, &header, header_bytes)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/util/Serializer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3387,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest, <size of dest>,  &header,  header_bytes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Without a finding to evaluate, there is no evidence of a vulnerability or risk. Please provide a valid SAST finding for assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Serializer.h"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 4,
                  "endLine": 72,
                  "endColumn": 37,
                  "charOffset": 2476,
                  "charLength": 33,
                  "snippet": {
                    "text": "memcpy(&value, src, sizeof(value)",
                    "rendered": {
                      "text": "memcpy(&value, src, sizeof(value)",
                      "markdown": "`memcpy(&value, src, sizeof(value)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/util/Serializer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2476,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&value, <size of &value>,  src,  sizeof(value)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Without a valid SAST finding, it is not possible to determine if there is a genuine vulnerability or estimate the likelihood of a false positive. Please provide a valid finding for assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Serializer.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 4,
                  "endLine": 57,
                  "endColumn": 38,
                  "charOffset": 1825,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(dest, &value, sizeof(value)",
                    "rendered": {
                      "text": "memcpy(dest, &value, sizeof(value)",
                      "markdown": "`memcpy(dest, &value, sizeof(value)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/util/Serializer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1825,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest, <size of dest>,  &value,  sizeof(value)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)",
            "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from a source address to a destination address. This function can lead to vulnerabilities if not used properly. The most common vulnerability is a buffer overflow, which occurs when the size of the data being copied exceeds the size of the destination buffer. This can lead to data corruption, crashes, and potentially code execution.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that the destination buffer is large enough to hold the data being copied. This can be done by checking the size of the destination buffer and the size of the source data before calling `memcpy`.\n\nAdditionally, consider using safer alternatives to `memcpy` such as `strncpy` or `memcpy_s` which include a size parameter to prevent buffer overflows.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to fix a vulnerable `memcpy` call:\n\n```cpp\n// Vulnerable code\nchar dst[100];\nchar src[200];\nmemcpy(dst, src, sizeof(src));\n\n// Fixed code\nchar dst[100];\nchar src[200];\nif (sizeof(dst) >= sizeof(src)) {\n    memcpy(dst, src, sizeof(src));\n} else {\n    // Handle error\n}\n```\n\nIn the fixed code, we check if the destination buffer is large enough before calling `memcpy`.\n\n## Library Dependencies\n\nThe `memcpy` function is part of the C standard library, so no additional library dependencies are required.\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceSycl.h"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 27,
                  "endLine": 316,
                  "endColumn": 71,
                  "charOffset": 12336,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(void *dst, const void *src, size_t n)",
                    "rendered": {
                      "text": "memcpy(void *dst, const void *src, size_t n)",
                      "markdown": "`memcpy(void *dst, const void *src, size_t n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceSycl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12336,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(void *dst, <size of void *dst>,  const void *src,  size_t n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)",
            "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. This function is vulnerable to buffer overflow attacks if the size of the source (`src`) is larger than the destination (`dst`). This can lead to unexpected behavior, including program crashes, data corruption, and execution of arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that the destination buffer is large enough to hold the data being copied from the source buffer. This can be done by checking the size of the destination buffer and the size of the source data before calling `memcpy`.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix for the vulnerability:\n\n```cpp\n#include <cstring> // for memcpy\n#include <cassert> // for assert\n\nvoid safe_memcpy(void *dst, size_t dst_size, const void *src, size_t src_size) {\n    assert(dst_size >= src_size);\n    memcpy(dst, src, src_size);\n}\n```\n\nIn this code, we first check that the size of the destination buffer (`dst_size`) is greater than or equal to the size of the source data (`src_size`). If this is not the case, the program will terminate with an error message. If the sizes are valid, we then proceed to call `memcpy`.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstring>`: This header file contains definitions for functions to manipulate C strings and arrays.\n- `<cassert>`: This header file contains the `assert` macro, which can be used to diagnose logical errors during program execution.\n\n## OWASP and CWE Links\n\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceSycl.h"
                },
                "region": {
                  "startLine": 1008,
                  "startColumn": 27,
                  "endLine": 1008,
                  "endColumn": 72,
                  "charOffset": 39346,
                  "charLength": 45,
                  "snippet": {
                    "text": "memcpy(void *dst, const Index *src, size_t n)",
                    "rendered": {
                      "text": "memcpy(void *dst, const Index *src, size_t n)",
                      "markdown": "`memcpy(void *dst, const Index *src, size_t n)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/CXX11/src/Tensor/TensorDeviceSycl.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 39346,
                        "charLength": 45
                      },
                      "insertedContent": {
                        "text": "memcpy_s(void *dst, <size of void *dst>,  const Index *src,  size_t n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Memory.h"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 4,
                  "endLine": 570,
                  "endColumn": 31,
                  "charOffset": 20409,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(target, start, size)",
                    "rendered": {
                      "text": "memcpy(target, start, size)",
                      "markdown": "`memcpy(target, start, size)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/util/Memory.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20409,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(target, <size of target>,  start,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS161085",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (malloc)",
            "markdown": "The input is missing or null, so there is no evidence of a memory operation finding. Without any data, there is no indication of a genuine vulnerability. By default, this is considered a likely false positive due to the absence of any actionable information.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Memory.h"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 17,
                  "endLine": 257,
                  "endColumn": 29,
                  "charOffset": 9623,
                  "charLength": 12,
                  "snippet": {
                    "text": "malloc(size)",
                    "rendered": {
                      "text": "malloc(size)",
                      "markdown": "`malloc(size)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/util/Memory.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9623,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS161085",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (malloc)",
            "markdown": "No input data was provided for analysis. Without a valid finding object, it is not possible to determine if there is a genuine vulnerability or estimate the likelihood of a false positive. Please provide a valid finding for assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Memory.h"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 13,
                  "endLine": 184,
                  "endColumn": 25,
                  "charOffset": 7535,
                  "charLength": 12,
                  "snippet": {
                    "text": "malloc(size)",
                    "rendered": {
                      "text": "malloc(size)",
                      "markdown": "`malloc(size)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/util/Memory.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7535,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards. The `memmove` function is one of these prohibited functions. It copies n bytes from memory area src to memory area dest. The memory areas may overlap.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. For instance, instead of `memmove`, you can use `std::copy` from the C++ Standard Library, which is safer and less prone to errors.\n\n## Source Code Fix Recommendation\n\nInstead of using `memmove`, use `std::copy`. Here is an example:\n\n```cpp\n#include <algorithm> // for std::copy\n\n// ...\n\nchar src[10];\nchar dest[10];\n\n// ... (fill src with data)\n\nstd::copy(src, src + 10, dest);\n```\n\n## Library Dependencies\n\nThe code example requires the `<algorithm>` library.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Memory.h"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 9,
                  "endLine": 593,
                  "endColumn": 16,
                  "charOffset": 21230,
                  "charLength": 7,
                  "snippet": {
                    "text": "memmove",
                    "rendered": {
                      "text": "memmove",
                      "markdown": "`memmove`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other issues. One such function is `alloca`.\n\nThe `alloca` function dynamically allocates memory on the stack. This can be dangerous because it can lead to stack overflow if the requested size is too large. Furthermore, unlike `malloc`, the `alloca` function does not provide any mechanism to detect such errors. Therefore, the use of `alloca` can lead to vulnerabilities that can be exploited by an attacker.\n\n## Mitigation Advice\n\nAvoid using `alloca` function. Instead, use functions like `malloc` or `calloc` which allocate memory on the heap and provide error checking. Also, always check the return value of these functions to ensure that the memory allocation was successful.\n\n## Source Code Fix Recommendation\n\nReplace the `alloca` function with `malloc` or `calloc`. For example, if you have the following code:\n\n```cpp\n#include <alloca.h>\n\nvoid function(size_t size) {\n    char* buffer = (char*) alloca(size);\n    // ...\n}\n```\n\nYou can replace it with:\n\n```cpp\n#include <stdlib.h>\n\nvoid function(size_t size) {\n    char* buffer = (char*) malloc(size);\n    if (buffer == NULL) {\n        // handle error\n    }\n    // ...\n    free(buffer);\n}\n```\n\n## Library Dependencies\n\nThe code example requires the `stdlib.h` library.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-770: Allocation of Resources Without Limits or Throttling](https://cwe.mitre.org/data/definitions/770.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Memory.h"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 49,
                  "endLine": 624,
                  "endColumn": 55,
                  "charOffset": 22272,
                  "charLength": 6,
                  "snippet": {
                    "text": "alloca",
                    "rendered": {
                      "text": "alloca",
                      "markdown": "`alloca`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS161085",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (malloc)",
            "markdown": "The input does not contain any data to analyze. As a result, there is no evidence of a genuine vulnerability. In the absence of any classification or code context, this is considered a likely false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Memory.h"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 24,
                  "endLine": 105,
                  "endColumn": 48,
                  "charOffset": 4446,
                  "charLength": 24,
                  "snippet": {
                    "text": "malloc(size + alignment)",
                    "rendered": {
                      "text": "malloc(size + alignment)",
                      "markdown": "`malloc(size + alignment)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/util/Memory.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4446,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/SparseCore/AmbiVector.h"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 11,
                  "endLine": 99,
                  "endColumn": 70,
                  "charOffset": 2832,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(newBuffer,  m_buffer,  copyElements * sizeof(ListEl)",
                    "rendered": {
                      "text": "memcpy(newBuffer,  m_buffer,  copyElements * sizeof(ListEl)",
                      "markdown": "`memcpy(newBuffer,  m_buffer,  copyElements * sizeof(ListEl)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/SparseCore/AmbiVector.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2832,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(newBuffer, <size of newBuffer>,   m_buffer,   copyElements * sizeof(ListEl)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the use of weak or non-cryptographic random number generators can lead to vulnerabilities. This is because these generators can produce predictable values, which can be exploited by an attacker to guess the generated values. This can lead to a variety of security issues, such as session prediction, password cracking, and other forms of information leakage.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong, cryptographic random number generator. In C++, this can be achieved by using the `<random>` library, which provides a variety of generators that produce high-quality random numbers. \n\n## Source Code Fix Recommendation\n\nInstead of using `rand()`, use `std::random_device` and `std::mt19937` from the `<random>` library. Here is an example:\n\n```cpp\n#include <random>\n\nstd::random_device rd;  // Will be used to obtain a seed for the random number engine\nstd::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()\nstd::uniform_int_distribution<> distrib(1, 6);\n\nint random_number = distrib(gen);\n```\n\n## Library Dependencies\n\nThe above code requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/MathFunctions.h"
                },
                "region": {
                  "startLine": 907,
                  "startColumn": 24,
                  "endLine": 907,
                  "endColumn": 29,
                  "charOffset": 26919,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other issues. One such function is `alloca`.\n\nThe `alloca` function dynamically allocates memory on the stack. This can be dangerous because it can lead to stack overflow if the requested size is too large. Furthermore, unlike `malloc`, the `alloca` function does not provide any mechanism to detect such errors. Therefore, the use of `alloca` can lead to vulnerabilities that can be exploited by an attacker.\n\n## Mitigation Advice\n\nAvoid using `alloca` function. Instead, use functions like `malloc` or `calloc` which allocate memory on the heap and provide error checking. Also, always check the return value of these functions to ensure that the memory allocation was successful.\n\n## Source Code Fix Recommendation\n\nReplace the `alloca` function with `malloc` or `calloc`. For example, if you have the following code:\n\n```cpp\n#include <alloca.h>\n\nvoid function(size_t size) {\n    char* buffer = (char*) alloca(size);\n    // ...\n}\n```\n\nYou can replace it with:\n\n```cpp\n#include <stdlib.h>\n\nvoid function(size_t size) {\n    char* buffer = (char*) malloc(size);\n    if (buffer == NULL) {\n        // handle error\n    }\n    // ...\n    free(buffer);\n}\n```\n\n## Library Dependencies\n\nThe code example requires the `stdlib.h` library.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-770: Allocation of Resources Without Limits or Throttling](https://cwe.mitre.org/data/definitions/770.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Memory.h"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 25,
                  "endLine": 625,
                  "endColumn": 31,
                  "charOffset": 22305,
                  "charLength": 6,
                  "snippet": {
                    "text": "alloca",
                    "rendered": {
                      "text": "alloca",
                      "markdown": "`alloca`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak random number generators or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program's operations, leading to security breaches.\n\nThe specific vulnerability sink in this case is `RAND_MAX`. This is a constant defined in the C++ standard library that represents the maximum value that can be returned by the `rand()` function. The `rand()` function is a weak random number generator that should not be used for generating cryptographic keys or any other security-related data.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a strong cryptographic random number generator instead of `rand()`. The C++ standard library provides the `<random>` header, which includes several random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nReplace the use of `rand()` with a cryptographic random number generator. Here is an example of how to do this:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, RAND_MAX);\n\nint random_number = dis(gen);\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` library from the C++ standard library.\n\n## References\n\n- [OWASP - Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/MathFunctions.h"
                },
                "region": {
                  "startLine": 902,
                  "startColumn": 54,
                  "endLine": 902,
                  "endColumn": 62,
                  "charOffset": 26638,
                  "charLength": 8,
                  "snippet": {
                    "text": "RAND_MAX",
                    "rendered": {
                      "text": "RAND_MAX",
                      "markdown": "`RAND_MAX`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the use of weak or non-cryptographic random number generators can lead to vulnerabilities. This is because these generators can produce predictable values, which can be exploited by an attacker to guess the generated values. This can lead to a variety of security issues, such as session prediction, password cracking, and other forms of information leakage.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong, cryptographic random number generator. In C++, this can be achieved by using the `<random>` library, which provides a variety of generators that produce high-quality random numbers. \n\n## Source Code Fix Recommendation\n\nInstead of using `rand()`, use `std::random_device` and `std::mt19937` from the `<random>` library. Here is an example:\n\n```cpp\n#include <random>\n\nstd::random_device rd;  // Will be used to obtain a seed for the random number engine\nstd::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()\nstd::uniform_int_distribution<> distrib(1, 6);\n\nint random_number = distrib(gen);\n```\n\n## Library Dependencies\n\nThe above code requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/MathFunctions.h"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 30,
                  "endLine": 892,
                  "endColumn": 35,
                  "charOffset": 26337,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak random number generators or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program's operations, leading to security breaches.\n\nThe specific vulnerability sink in this case is `RAND_MAX`. This is a constant defined in the C++ standard library that represents the maximum value that can be returned by the `rand()` function. The `rand()` function is a weak random number generator that should not be used for generating cryptographic keys or any other security-related data.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a strong cryptographic random number generator instead of `rand()`. The C++ standard library provides the `<random>` header, which includes several random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nReplace the use of `rand()` with a cryptographic random number generator. Here is an example of how to do this:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, RAND_MAX);\n\nint random_number = dis(gen);\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` library from the C++ standard library.\n\n## References\n\n- [OWASP - Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/MathFunctions.h"
                },
                "region": {
                  "startLine": 887,
                  "startColumn": 30,
                  "endLine": 887,
                  "endColumn": 38,
                  "charOffset": 26126,
                  "charLength": 8,
                  "snippet": {
                    "text": "RAND_MAX",
                    "rendered": {
                      "text": "RAND_MAX",
                      "markdown": "`RAND_MAX`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a likely false positive due to missing input.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 8,
                  "endLine": 224,
                  "endColumn": 82,
                  "charOffset": 7098,
                  "charLength": 74,
                  "snippet": {
                    "text": "memcpy(lowerProfile, m_lowerProfile, copyLowerProfileSize * sizeof (Index)",
                    "rendered": {
                      "text": "memcpy(lowerProfile, m_lowerProfile, copyLowerProfileSize * sizeof (Index)",
                      "markdown": "`memcpy(lowerProfile, m_lowerProfile, copyLowerProfileSize * sizeof (Index)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7098,
                        "charLength": 74
                      },
                      "insertedContent": {
                        "text": "memcpy_s(lowerProfile, <size of lowerProfile>,  m_lowerProfile,  copyLowerProfileSize * sizeof (Index)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/NumTraits.h"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 2,
                  "endLine": 98,
                  "endColumn": 35,
                  "charOffset": 3070,
                  "charLength": 33,
                  "snippet": {
                    "text": "memcpy(&tgt, &staged, sizeof(Tgt)",
                    "rendered": {
                      "text": "memcpy(&tgt, &staged, sizeof(Tgt)",
                      "markdown": "`memcpy(&tgt, &staged, sizeof(Tgt)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/NumTraits.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3070,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&tgt, <size of &tgt>,  &staged,  sizeof(Tgt)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards. One such function is `memmove`.\n\nThe `memmove` function is used to copy a block of memory from one location to another. It is considered dangerous because it does not check the size of the destination buffer, which can lead to buffer overflow if the source is larger than the destination.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives that perform bounds checking to prevent buffer overflow. In C++, this could be functions from the Standard Template Library (STL) like `std::copy` or `std::copy_n`.\n\n## Source Code Fix Recommendation\n\nInstead of using `memmove`, you can use `std::copy` or `std::copy_n` from the `<algorithm>` library. Here is an example:\n\n```cpp\n#include <algorithm>\n\n// Assuming src and dest are pointers to arrays of size src_size and dest_size respectively\nstd::copy(src, src + src_size, dest);\n```\n\nIn this example, `std::copy` will throw an exception if the destination buffer is not large enough, preventing a buffer overflow.\n\n## Library Dependencies\n\nThe code example requires the `<algorithm>` library.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/util/Memory.h"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 9,
                  "endLine": 138,
                  "endColumn": 16,
                  "charOffset": 5834,
                  "charLength": 7,
                  "snippet": {
                    "text": "memmove",
                    "rendered": {
                      "text": "memmove",
                      "markdown": "`memmove`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 8,
                  "endLine": 223,
                  "endColumn": 82,
                  "charOffset": 7013,
                  "charLength": 74,
                  "snippet": {
                    "text": "memcpy(upperProfile, m_upperProfile, copyUpperProfileSize * sizeof (Index)",
                    "rendered": {
                      "text": "memcpy(upperProfile, m_upperProfile, copyUpperProfileSize * sizeof (Index)",
                      "markdown": "`memcpy(upperProfile, m_upperProfile, copyUpperProfileSize * sizeof (Index)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7013,
                        "charLength": 74
                      },
                      "insertedContent": {
                        "text": "memcpy_s(upperProfile, <size of upperProfile>,  m_upperProfile,  copyUpperProfileSize * sizeof (Index)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 8,
                  "endLine": 221,
                  "endColumn": 62,
                  "charOffset": 6883,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(upper, m_upper, copyUpperSize * sizeof (Scalar)",
                    "rendered": {
                      "text": "memcpy(upper, m_upper, copyUpperSize * sizeof (Scalar)",
                      "markdown": "`memcpy(upper, m_upper, copyUpperSize * sizeof (Scalar)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6883,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(upper, <size of upper>,  m_upper,  copyUpperSize * sizeof (Scalar)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a likely false positive due to the absence of any actionable details.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 8,
                  "endLine": 64,
                  "endColumn": 88,
                  "charOffset": 1846,
                  "charLength": 80,
                  "snippet": {
                    "text": "memcpy(m_lowerProfile, other.m_lowerProfile, m_lowerProfileSize * sizeof (Index)",
                    "rendered": {
                      "text": "memcpy(m_lowerProfile, other.m_lowerProfile, m_lowerProfileSize * sizeof (Index)",
                      "markdown": "`memcpy(m_lowerProfile, other.m_lowerProfile, m_lowerProfileSize * sizeof (Index)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1846,
                        "charLength": 80
                      },
                      "insertedContent": {
                        "text": "memcpy_s(m_lowerProfile, <size of m_lowerProfile>,  other.m_lowerProfile,  m_lowerProfileSize * sizeof (Index)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 8,
                  "endLine": 62,
                  "endColumn": 56,
                  "charOffset": 1678,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(m_lower, other.m_lower, other.lowerSize()",
                    "rendered": {
                      "text": "memcpy(m_lower, other.m_lower, other.lowerSize()",
                      "markdown": "`memcpy(m_lower, other.m_lower, other.lowerSize()`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1678,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(m_lower, <size of m_lower>,  other.m_lower,  other.lowerSize()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Without any information about the code, buffer operation, or context, it is not possible to determine if there is a genuine vulnerability or a false positive. Please provide a valid SAST finding for assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 8,
                  "endLine": 61,
                  "endColumn": 56,
                  "charOffset": 1601,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(m_upper, other.m_upper, other.upperSize()",
                    "rendered": {
                      "text": "memcpy(m_upper, other.m_upper, other.upperSize()",
                      "markdown": "`memcpy(m_upper, other.m_upper, other.upperSize()`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1601,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(m_upper, <size of m_upper>,  other.m_upper,  other.upperSize()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)",
            "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. This function is vulnerable to buffer overflow attacks if the size of the data being copied is larger than the size of the destination buffer. In the provided code snippet, if `copyDiagSize` is larger than the size of `diag`, it can lead to a buffer overflow.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that the destination buffer is large enough to hold the data being copied. This can be done by checking the size of the destination buffer and the size of the source data before calling `memcpy`.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code snippet:\n\n```cpp\nsize_t diagSize = sizeof(diag) / sizeof(Scalar);\nif (copyDiagSize <= diagSize) {\n    memcpy(diag, m_diag, copyDiagSize * sizeof (Scalar));\n} else {\n    // Handle error: copyDiagSize is larger than diagSize\n}\n```\n\nIn this fix, we first calculate the size of `diag` in terms of `Scalar`. Then, we check if `copyDiagSize` is less than or equal to `diagSize` before calling `memcpy`. If `copyDiagSize` is larger than `diagSize`, we handle the error appropriately.\n\n## Library Dependencies\n\nThe `memcpy` function is part of the C standard library, so no additional library dependencies are required for the provided code snippet.\n\n## OWASP and CWE Links\n\n- [OWASP Buffer Overflow Attack](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 8,
                  "endLine": 220,
                  "endColumn": 59,
                  "charOffset": 6821,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(diag, m_diag, copyDiagSize * sizeof (Scalar)",
                    "rendered": {
                      "text": "memcpy(diag, m_diag, copyDiagSize * sizeof (Scalar)",
                      "markdown": "`memcpy(diag, m_diag, copyDiagSize * sizeof (Scalar)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6821,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(diag, <size of diag>,  m_diag,  copyDiagSize * sizeof (Scalar)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 8,
                  "endLine": 60,
                  "endColumn": 65,
                  "charOffset": 1533,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(m_diag, other.m_diag, m_diagSize * sizeof (Scalar)",
                    "rendered": {
                      "text": "memcpy(m_diag, other.m_diag, m_diagSize * sizeof (Scalar)",
                      "markdown": "`memcpy(m_diag, other.m_diag, m_diagSize * sizeof (Scalar)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1533,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(m_diag, <size of m_diag>,  other.m_diag,  m_diagSize * sizeof (Scalar)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)",
            "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. This function is vulnerable to buffer overflow attacks if the size of the data being copied is larger than the size of the destination buffer. In the provided code snippet, if `copyLowerSize` is larger than the size of `lower`, it can lead to a buffer overflow.\n\nBuffer overflow vulnerabilities can lead to various security issues, including arbitrary code execution, data corruption, and application crashes.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always ensure that the destination buffer is large enough to hold the data being copied. This can be done by checking the size of the destination buffer before calling `memcpy`.\n\nAdditionally, consider using safer alternatives to `memcpy`, such as `strncpy` or `memcpy_s`, which include a length parameter to prevent buffer overflows.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code snippet:\n\n```cpp\nsize_t lowerSize = sizeof(lower) / sizeof(Scalar);\nif (copyLowerSize <= lowerSize) {\n    memcpy(lower, m_lower, copyLowerSize * sizeof (Scalar));\n} else {\n    // Handle error: copyLowerSize is larger than the size of lower\n}\n```\n\nIn this fix, we first calculate the size of `lower` and then check if `copyLowerSize` is larger than `lowerSize` before calling `memcpy`.\n\n## Library Dependencies\n\nThe `memcpy` function is part of the C standard library, so no additional library dependencies are required for the provided code snippet.\n\n## References\n\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 8,
                  "endLine": 222,
                  "endColumn": 62,
                  "charOffset": 6948,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(lower, m_lower, copyLowerSize * sizeof (Scalar)",
                    "rendered": {
                      "text": "memcpy(lower, m_lower, copyLowerSize * sizeof (Scalar)",
                      "markdown": "`memcpy(lower, m_lower, copyLowerSize * sizeof (Scalar)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6948,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(lower, <size of lower>,  m_lower,  copyLowerSize * sizeof (Scalar)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)",
            "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. This function does not check for the size of the destination buffer, which can lead to buffer overflow if the source is larger than the destination. This is a common vulnerability in C++ programming that can lead to serious security issues such as data corruption, system crash, or even code execution.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always ensure that the destination buffer is large enough to hold the data being copied. This can be done by checking the size of the source and destination before calling `memcpy`. Alternatively, use functions that do check the size of the destination buffer, such as `strncpy` or `memcpy_s`.\n\n## Source Code Fix Recommendation\n\nReplace the `memcpy` function with `memcpy_s`, which includes a size parameter for the destination buffer. This will prevent buffer overflow by ensuring that the destination buffer is large enough to hold the copied data.\n\n```cpp\nif (m_upperProfileSize >= other.m_upperProfileSize) {\n    memcpy_s(m_upperProfile, m_upperProfileSize * sizeof(Index), other.m_upperProfile, other.m_upperProfileSize * sizeof(Index));\n} else {\n    // Handle error: destination buffer is too small\n}\n```\n\n## Library Dependencies\n\nThe `memcpy` and `memcpy_s` functions are part of the C standard library, so no additional library dependencies are required.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 8,
                  "endLine": 63,
                  "endColumn": 88,
                  "charOffset": 1755,
                  "charLength": 80,
                  "snippet": {
                    "text": "memcpy(m_upperProfile, other.m_upperProfile, m_upperProfileSize * sizeof (Index)",
                    "rendered": {
                      "text": "memcpy(m_upperProfile, other.m_upperProfile, m_upperProfileSize * sizeof (Index)",
                      "markdown": "`memcpy(m_upperProfile, other.m_upperProfile, m_upperProfileSize * sizeof (Index)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1755,
                        "charLength": 80
                      },
                      "insertedContent": {
                        "text": "memcpy_s(m_upperProfile, <size of m_upperProfile>,  other.m_upperProfile,  m_upperProfileSize * sizeof (Index)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineMatrix.h"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 12,
                  "endLine": 669,
                  "endColumn": 76,
                  "charOffset": 25263,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(m_rowStartIndex, other.m_rowStartIndex, (m_outerSize + 1)",
                    "rendered": {
                      "text": "memcpy(m_rowStartIndex, other.m_rowStartIndex, (m_outerSize + 1)",
                      "markdown": "`memcpy(m_rowStartIndex, other.m_rowStartIndex, (m_outerSize + 1)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineMatrix.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25263,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(m_rowStartIndex, <size of m_rowStartIndex>,  other.m_rowStartIndex,  (m_outerSize + 1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No finding data was provided. Without any information about the code, buffer operation, or context, there is no evidence of a vulnerability. This is considered a false positive by default.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Skyline/SkylineMatrix.h"
                },
                "region": {
                  "startLine": 668,
                  "startColumn": 12,
                  "endLine": 668,
                  "endColumn": 76,
                  "charOffset": 25167,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(m_colStartIndex, other.m_colStartIndex, (m_outerSize + 1)",
                    "rendered": {
                      "text": "memcpy(m_colStartIndex, other.m_colStartIndex, (m_outerSize + 1)",
                      "markdown": "`memcpy(m_colStartIndex, other.m_colStartIndex, (m_outerSize + 1)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/Skyline/SkylineMatrix.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25167,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(m_colStartIndex, <size of m_colStartIndex>,  other.m_colStartIndex,  (m_outerSize + 1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/IterativeSolvers/BiCGSTABL.h"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 35,
                  "endLine": 74,
                  "endColumn": 42,
                  "charOffset": 3209,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/DenseBase.h"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 34,
                  "endLine": 558,
                  "endColumn": 41,
                  "charOffset": 25260,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\"",
            "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of certain C library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other security issues. In this case, the function in question is `sscanf`.\n\nThe `sscanf` function is used to read formatted input from a string. However, it does not perform bounds checking, which means it can lead to buffer overflow vulnerabilities if the input is not properly controlled.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using `sscanf` and other unsafe C library functions. Instead, use safer alternatives that perform bounds checking or ensure that you manually perform bounds checking before using these functions.\n\n## Source Code Fix Recommendation\n\nInstead of using `sscanf`, you can use `strncpy` or `snprintf` which are safer as they take the size of the buffer as an argument, preventing buffer overflows.\n\nHere is an example of how you can replace `sscanf` with `strncpy`:\n\n```cpp\nchar dest[50];\nchar src[50] = \"hello world\";\nstrncpy(dest, src, sizeof(dest));\ndest[sizeof(dest) - 1] = 0; // Ensure null-termination\n```\n\n## Library Dependencies\n\nThe `sscanf` function is part of the C standard library, so no additional library dependencies are required.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/SparseExtra/MarketIO.h"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "endLine": 40,
                  "endColumn": 15,
                  "charOffset": 1444,
                  "charLength": 6,
                  "snippet": {
                    "text": "sscanf",
                    "rendered": {
                      "text": "sscanf",
                      "markdown": "`sscanf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\"",
            "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of certain C library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other security issues. In this case, the function in question is `sscanf`.\n\nThe `sscanf` function is used to read formatted input from a string. However, it does not perform bounds checking, which means it can lead to buffer overflow vulnerabilities if the input is not properly controlled.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using `sscanf` and other unsafe C library functions. Instead, use safer alternatives that perform bounds checking or ensure that you manually perform bounds checking before using these functions.\n\n## Source Code Fix Recommendation\n\nInstead of using `sscanf`, you can use `strncpy` or `snprintf` which are safer as they take the size of the buffer as an argument, preventing buffer overflows.\n\nHere is an example of how you can replace `sscanf` with `strncpy`:\n\n```cpp\nchar dest[50];\nchar src[50] = \"hello world\";\nstrncpy(dest, src, sizeof(dest));\ndest[sizeof(dest) - 1] = 0; // Ensure null-termination\n```\n\n## Library Dependencies\n\nThe `sscanf` function is part of the C standard library, so no additional library dependencies are required.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/SparseExtra/MarketIO.h"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 9,
                  "endLine": 37,
                  "endColumn": 15,
                  "charOffset": 1240,
                  "charLength": 6,
                  "snippet": {
                    "text": "sscanf",
                    "rendered": {
                      "text": "sscanf",
                      "markdown": "`sscanf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\"",
            "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of certain C library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other security issues. In this case, the function in question is `sscanf`.\n\nThe `sscanf` function is used to read formatted input from a string. However, it does not perform bounds checking, which means it can lead to buffer overflow vulnerabilities if the input is not properly controlled.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using `sscanf` and other unsafe C library functions. Instead, use safer alternatives that perform bounds checking or ensure that you manually perform bounds checking before using these functions.\n\n## Source Code Fix Recommendation\n\nInstead of using `sscanf`, you can use `strncpy` or `snprintf` which are safer as they take the size of the buffer as an argument, preventing buffer overflows.\n\nHere is an example of how you can replace `sscanf` with `strncpy`:\n\n```cpp\nchar dest[50];\nchar src[50] = \"hello world\";\nstrncpy(dest, src, sizeof(dest));\ndest[sizeof(dest) - 1] = 0; // Ensure null-termination\n```\n\n## Library Dependencies\n\nThe `sscanf` function is part of the C standard library, so no additional library dependencies are required.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/SparseExtra/MarketIO.h"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 9,
                  "endLine": 34,
                  "endColumn": 15,
                  "charOffset": 1083,
                  "charLength": 6,
                  "snippet": {
                    "text": "sscanf",
                    "rendered": {
                      "text": "sscanf",
                      "markdown": "`sscanf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\"",
            "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of certain C library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other security issues. In this case, the function in question is `sscanf`.\n\nThe `sscanf` function is used to read formatted input from a string. However, it does not perform bounds checking, which means it can lead to buffer overflow vulnerabilities if the input is not properly controlled.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using `sscanf` and other unsafe C library functions. Instead, use safer alternatives that perform bounds checking or ensure that you manually perform bounds checking before using these functions.\n\n## Source Code Fix Recommendation\n\nInstead of using `sscanf`, you can use `strncpy` or `snprintf` which are safer as they take the size of the buffer as an argument, preventing buffer overflows.\n\nHere is an example of how you can replace `sscanf` with `strncpy`:\n\n```cpp\nchar dest[50];\nchar src[50] = \"hello world\";\nstrncpy(dest, src, sizeof(dest));\ndest[sizeof(dest) - 1] = 0; // Ensure null-termination\n```\n\n## Library Dependencies\n\nThe `sscanf` function is part of the C standard library, so no additional library dependencies are required.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/SparseExtra/MarketIO.h"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 9,
                  "endLine": 31,
                  "endColumn": 15,
                  "charOffset": 940,
                  "charLength": 6,
                  "snippet": {
                    "text": "sscanf",
                    "rendered": {
                      "text": "sscanf",
                      "markdown": "`sscanf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured Web Link Vulnerability",
            "markdown": "## Description\n\nUnsecured Web Link Vulnerability refers to the security risk associated with the use of unsecured HTTP links in a C++ program. When a program uses an unsecured HTTP link, it exposes the data being transmitted to potential interception, manipulation, or theft. This is because HTTP traffic is not encrypted, unlike HTTPS traffic. This vulnerability can lead to serious security breaches, including data leakage, session hijacking, and man-in-the-middle attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure HTTPS links instead of HTTP. HTTPS encrypts the data being transmitted, making it much more difficult for attackers to intercept or manipulate it. Additionally, validate all URLs and do not trust user input without validation.\n\n## Source Code Fix Recommendation\n\nReplace the unsecured HTTP link with a secure HTTPS link:\n\n```cpp\n// Vulnerable code\nstd::string url = \"http://mozilla.org\";\n\n// Recommended fix\nstd::string url = \"https://mozilla.org\";\n```\n\n## Library Dependencies\n\nThe specific code example does not require any library dependencies to execute properly.\n\n## References\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/SparseExtra/MarketIO.h"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 41,
                  "endLine": 9,
                  "endColumn": 59,
                  "charOffset": 407,
                  "charLength": 18,
                  "snippet": {
                    "text": "http://mozilla.org",
                    "rendered": {
                      "text": "http://mozilla.org",
                      "markdown": "`http://mozilla.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/SparseExtra/MarketIO.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 407,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "https://mozilla.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/IterativeSolvers/IDRS.h"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 55,
                  "endLine": 76,
                  "endColumn": 62,
                  "charOffset": 3197,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/Random.h"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 17,
                  "endLine": 134,
                  "endColumn": 24,
                  "charOffset": 4918,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/Random.h"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 20,
                  "endLine": 88,
                  "endColumn": 27,
                  "charOffset": 3252,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS121708",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (memcpy)",
            "markdown": "No input data was provided for analysis. Without details about the code, buffer operation, or context, it is not possible to determine if there is a genuine vulnerability or a false positive. Please provide a valid SAST finding for assessment.\n\n___\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/SparseExtra/BlockSparseMatrix.h"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 8,
                  "endLine": 701,
                  "endColumn": 86,
                  "charOffset": 27095,
                  "charLength": 78,
                  "snippet": {
                    "text": "memcpy(&(m_values[nz_marker]), it->value().data(), block_size * sizeof(Scalar)",
                    "rendered": {
                      "text": "memcpy(&(m_values[nz_marker]), it->value().data(), block_size * sizeof(Scalar)",
                      "markdown": "`memcpy(&(m_values[nz_marker]), it->value().data(), block_size * sizeof(Scalar)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/Eigen/src/SparseExtra/BlockSparseMatrix.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 27095,
                        "charLength": 78
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&(m_values[nz_marker]), <size of &(m_values[nz_marker])>,  it->value().data(),  block_size * sizeof(Scalar)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/Random.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 20,
                  "endLine": 57,
                  "endColumn": 27,
                  "charOffset": 2056,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/DenseBase.h"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 34,
                  "endLine": 557,
                  "endColumn": 41,
                  "charOffset": 25194,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/IterativeSolvers/IDRSTABL.h"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 59,
                  "endLine": 204,
                  "endColumn": 66,
                  "charOffset": 7500,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability",
            "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ is not a vulnerability specific to the language itself, but rather a general security issue that can occur when a program uses an unsecured URL (HTTP instead of HTTPS) to fetch data or resources. This can expose the program to various attacks such as Man-in-the-Middle (MitM) where an attacker can intercept and potentially alter the data being transmitted.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure connections (HTTPS) when your program needs to fetch data or resources from the internet. This ensures that the data being transmitted is encrypted and cannot be easily intercepted or altered.\n\n## Source Code Fix Recommendation\n\nThe specific vulnerability sink provided is a URL: http://eigen.tuxfamily.org. To fix this, simply change the URL to use HTTPS:\n\n```cpp\nstd::string url = \"https://eigen.tuxfamily.org\";\n```\n\n## Library Dependencies\n\nThe code example provided does not require any specific library dependencies to execute properly.\n\n## OWASP Resources\n\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n- [OWASP Top 10 2017: A6-Security Misconfiguration](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/DenseStorage.h"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 15,
                  "endLine": 81,
                  "endColumn": 41,
                  "charOffset": 3113,
                  "charLength": 26,
                  "snippet": {
                    "text": "http://eigen.tuxfamily.org",
                    "rendered": {
                      "text": "http://eigen.tuxfamily.org",
                      "markdown": "`http://eigen.tuxfamily.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/DenseStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3113,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "https://eigen.tuxfamily.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. These generators can produce predictable outcomes, which can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\nIn the given code snippet, `Eigen::MatrixXi::Random(4,4)` is used to generate a 4x4 matrix of random integers. However, the `Random()` function in Eigen library is not cryptographically secure, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a way to generate a 4x4 matrix of random integers using a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(INT_MIN, INT_MAX);\n\nEigen::MatrixXi A(4,4);\nfor(int i=0; i<4; ++i)\n    for(int j=0; j<4; ++j)\n        A(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n- `<random>`: A standard C++ library for generating random numbers.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/examples/nullary_indexing.cpp"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 39,
                  "endLine": 43,
                  "endColumn": 46,
                  "charOffset": 1634,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/MatrixBase_random_int_int.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 18,
                  "endLine": 1,
                  "endColumn": 25,
                  "charOffset": 18,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/SelfAdjointEigenSolver_compute_MatrixType2.cpp"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 14,
                  "endLine": 3,
                  "endColumn": 21,
                  "charOffset": 82,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, potentially leading to a security breach.\n\nIn the given code snippet, `MatrixXi::Random(3,4)` is used to generate a random matrix. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nEigen::MatrixXi m(3,4);\nfor(int i=0; i<3; i++)\n    for(int j=0; j<4; j++)\n        m(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/Vectorwise_reverse.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured URL Vulnerability",
            "markdown": "## Description\n\nUnsecured URL Vulnerability in C++ programming language refers to the situation where a program does not validate or incorrectly validates an input that can affect the control flow or data flow of a program. In this case, the unsecured URL `http://eigen.tuxfamily.org` is the input that is not being validated. This can lead to various security vulnerabilities such as injection attacks, cross-site scripting (XSS), and remote file inclusion (RFI), among others.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always validate and sanitize all inputs, especially those that can affect the control flow or data flow of your program. This includes URLs, user inputs, file inputs, etc. \n\n## Source Code Fix Recommendation\n\nSince the specific vulnerability sink is not provided, a general recommendation would be to use a secure function to validate the URL before using it. Here is an example of how you can do this:\n\n```cpp\n#include <regex>\n#include <string>\n\nbool isValidUrl(const std::string &url) {\n    std::regex url_regex(\n        R\"(^http(s)?://([\\w-]+.)+[\\w-]+(/[\\w- ;,./?%&=]*)?$)\",\n        std::regex::extended\n    );\n    return std::regex_match(url, url_regex);\n}\n\nint main() {\n    std::string url = \"http://eigen.tuxfamily.org\";\n    if (isValidUrl(url)) {\n        // Use the URL\n    } else {\n        // Handle invalid URL\n    }\n    return 0;\n}\n```\n\nThis code uses the C++ Standard Library's regex module to validate the URL.\n\n## Library Dependencies\n\n- C++ Standard Library\n\n## OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-346: Origin Validation Error](https://cwe.mitre.org/data/definitions/346.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Eigen/src/Core/DenseStorage.h"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 15,
                  "endLine": 75,
                  "endColumn": 41,
                  "charOffset": 2747,
                  "charLength": 26,
                  "snippet": {
                    "text": "http://eigen.tuxfamily.org",
                    "rendered": {
                      "text": "http://eigen.tuxfamily.org",
                      "markdown": "`http://eigen.tuxfamily.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "Eigen/src/Core/DenseStorage.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2747,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "https://eigen.tuxfamily.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, potentially leading to a security breach.\n\nIn the given code snippet, `MatrixXi::Random(3,4)` is used to generate a random matrix. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nEigen::MatrixXi m(3,4);\nfor(int i=0; i<3; i++)\n    for(int j=0; j<4; j++)\n        m(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/MatrixBase_reverse.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, potentially leading to a security breach.\n\nIn the given code snippet, `MatrixXcf::Random(2,2)` is used to generate a 2x2 matrix of random complex float numbers. However, the `Random()` function is not cryptographically secure, making it a potential vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a sample code fix using the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::default_random_engine generator(rd());\nstd::uniform_real_distribution<float> distribution(-1.0, 1.0);\n\nEigen::MatrixXcf a(2,2);\nfor(int i=0; i<2; ++i)\n{\n    for(int j=0; j<2; ++j)\n    {\n        float real = distribution(generator);\n        float imag = distribution(generator);\n        a(i,j) = std::complex<float>(real, imag);\n    }\n}\n```\n\nIn this code, `std::random_device` is used to seed the random number generator, and `std::uniform_real_distribution` is used to generate random float numbers between -1.0 and 1.0. These random numbers are then used to create a 2x2 matrix of complex float numbers.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<random>`: for the random number generator and distribution.\n- `<Eigen/Dense>`: for the `MatrixXcf` class.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/tut_arithmetic_transpose_conjugate.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "endLine": 1,
                  "endColumn": 32,
                  "charOffset": 25,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver_MatrixType2.cpp"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 14,
                  "endLine": 4,
                  "endColumn": 21,
                  "charOffset": 152,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict future values, leading to a breach of security.\n\nIn the given code snippet, `MatrixXd::Random(5,5)` is used to generate a 5x5 matrix of random numbers. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code snippet that uses a cryptographically secure random number generator to generate a 5x5 matrix of random numbers:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd X(5,5);\nfor(int i=0; i<5; ++i)\n    for(int j=0; j<5; ++j)\n        X(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<random>`: This is a standard C++ library that provides facilities to generate random numbers.\n- `Eigen/Dense`: This is a part of the Eigen library, which is used for linear algebra.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/SelfAdjointEigenSolver_compute_MatrixType2.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict future values, leading to a breach of security.\n\nIn the given code snippet, `MatrixXd::Random(5,5)` is used to generate a 5x5 matrix of random numbers. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code snippet that uses a cryptographically secure random number generator to generate a 5x5 matrix of random numbers:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd X(5,5);\nfor(int i=0; i<5; ++i)\n    for(int j=0; j<5; ++j)\n        X(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<random>`: This is a standard C++ library that provides facilities to generate random numbers.\n- `Eigen/Dense`: This is a part of the Eigen library, which is used for linear algebra.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/Tridiagonalization_decomposeInPlace.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, potentially leading to a security breach.\n\nIn the given code snippet, `Matrix4d::Random(4,4)` is used to generate a 4x4 matrix of random numbers. However, the `Random()` function may not be using a cryptographically secure random number generator, making it a potential vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the code snippet using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix4d A;\nfor (int i = 0; i < 4; ++i)\n    for (int j = 0; j < 4; ++j)\n        A(i, j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n- `<random>`: A standard C++ library for generating random numbers.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/HessenbergDecomposition_packedMatrix.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict future values, leading to a breach of security.\n\nIn the given code snippet, `MatrixXd::Random(5,5)` is used to generate a 5x5 matrix of random numbers. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code snippet that uses a cryptographically secure random number generator to generate a 5x5 matrix of random numbers:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd X(5,5);\nfor(int i=0; i<5; ++i)\n    for(int j=0; j<5; ++j)\n        X(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<random>`: This is a standard C++ library that provides facilities to generate random numbers.\n- `Eigen/Dense`: This is a part of the Eigen library, which is used for linear algebra.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver_MatrixType2.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable outputs and can be exploited by attackers to predict the sequence of random numbers, which can compromise the security of the application.\n\nThe specific vulnerability sink in the provided code is the use of `MatrixXcf::Random(4,4)`, which generates a 4x4 matrix of complex float numbers using a non-cryptographic or weak random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix recommendation using the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXcf A = Eigen::MatrixXcf::NullaryExpr(4,4,[&](){ return std::complex<float>(dis(gen), dis(gen)); });\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/HessenbergDecomposition_compute.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "endLine": 1,
                  "endColumn": 32,
                  "charOffset": 25,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, leading to potential security risks.\n\nIn the given code example, `MatrixXf::Random(4,4)` is used to generate a 4x4 matrix of random floating point numbers. However, the `Random` function in Eigen library is not cryptographically secure, and thus can lead to the aforementioned vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the given code example:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXf X(4,4);\nfor(int i=0; i<4; ++i)\n    for(int j=0; j<4; ++j)\n        X(i,j) = dis(gen);\n```\n\nIn this code, a Mersenne Twister generator (`std::mt19937`) is used, which is a cryptographically secure random number generator. The `std::uniform_real_distribution` is used to generate floating point numbers in the range [-1, 1], similar to `MatrixXf::Random`.\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n- `<random>`: A standard C++ library for generating random numbers.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/SelfAdjointEigenSolver_compute_MatrixType.cpp"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 23,
                  "endLine": 2,
                  "endColumn": 30,
                  "charOffset": 63,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. These functions are often prohibited in secure coding standards.\n\nThe `atof` function is one of these prohibited functions. It converts a string to a double. The problem with `atof` is that it does not perform any error checking. If the string cannot be converted to a double, it returns zero. This can lead to unexpected behavior if the string is not a valid representation of a double.\n\n## Mitigation Advice\n\nAvoid using `atof` and other prohibited C functions. Instead, use safer alternatives that perform error checking. In the case of `atof`, a safer alternative is `strtod`. This function converts a string to a double and sets a pointer to the first character that could not be converted. If no conversion could be performed, the function returns zero and sets the pointer to the start of the string.\n\n## Source Code Fix Recommendation\n\nReplace `atof` with `strtod` and add error checking:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n#include <cstring>\n\nconst char* str = \"123.45\";\nchar* endptr;\nerrno = 0; // To distinguish success/failure after call\ndouble val = strtod(str, &endptr);\n\n// Check for various possible errors\nif ((errno == ERANGE && (val == HUGE_VALF || val == HUGE_VALL)) || (errno != 0 && val == 0)) {\n    perror(\"strtod\");\n    exit(EXIT_FAILURE);\n}\n\nif (endptr == str) {\n    fprintf(stderr, \"No digits were found\\n\");\n    exit(EXIT_FAILURE);\n}\n\n// If we got here, strtod() successfully parsed a number\nprintf(\"strtod() returned %f\\n\", val);\n\nif (*endptr != '\\0') // Not necessarily an error...\n    printf(\"Further characters after number: %s\\n\", endptr);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- cstdlib\n- cerrno\n- cstring\n- cstdio\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/Eigen/src/Eigenvalues/ArpackSelfAdjointEigenSolver.h"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 14,
                  "endLine": 385,
                  "endColumn": 18,
                  "charOffset": 16066,
                  "charLength": 4,
                  "snippet": {
                    "text": "atof",
                    "rendered": {
                      "text": "atof",
                      "markdown": "`atof`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, leading to potential security risks.\n\nIn the given code example, `MatrixXf::Random(4,4)` is used to generate a 4x4 matrix of random floating point numbers. However, the `Random` function in Eigen library is not cryptographically secure, and thus can lead to the aforementioned vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the given code example:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXf X(4,4);\nfor(int i=0; i<4; ++i)\n    for(int j=0; j<4; ++j)\n        X(i,j) = dis(gen);\n```\n\nIn this code, a Mersenne Twister generator (`std::mt19937`) is used, which is a cryptographically secure random number generator. The `std::uniform_real_distribution` is used to generate floating point numbers in the range [-1, 1], similar to `MatrixXf::Random`.\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n- `<random>`: A standard C++ library for generating random numbers.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/Tridiagonalization_compute.cpp"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 23,
                  "endLine": 2,
                  "endColumn": 30,
                  "charOffset": 57,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, leading to potential security risks.\n\nIn the given code example, `MatrixXf::Random(5,3)` is used to generate a random matrix. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the given code example:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXf A = Eigen::MatrixXf::Zero(5,3);\n\nfor(int i=0; i<A.rows(); ++i)\n    for(int j=0; j<A.cols(); ++j)\n        A(i,j) = dis(gen);\n```\n\nIn this code, a Mersenne Twister generator (`std::mt19937`) is used, which is a cryptographically secure random number generator. The `std::uniform_real_distribution` is used to generate random floating-point numbers between -1 and 1, similar to `MatrixXf::Random`.\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<random>`: for the random number generator and distribution.\n- `<Eigen/Dense>`: for the `Eigen::MatrixXf` class.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/HouseholderQR_householderQ.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 21,
                  "endLine": 1,
                  "endColumn": 28,
                  "charOffset": 21,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers or even the entire state of the random number generator.\n\nIn the given code example, `MatrixXd::Random(6,6)` is used to generate a 6x6 matrix of random numbers. However, the `Random()` function is not cryptographically secure, making it a potential vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nMatrixXd A(6,6);\nfor(int i=0; i<6; i++)\n    for(int j=0; j<6; j++)\n        A(i,j) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister engine (`std::mt19937`), which is a cryptographically secure pseudorandom number generator. `std::uniform_real_distribution<>` is then used to generate random numbers in the range [-1, 1].\n\n## Library Dependencies\n\nThe code example requires the Eigen library for the `MatrixXd` class and the `<random>` library for the random number generation.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/RealSchur_RealSchur_MatrixType.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the random number generator, leading to a breach of security.\n\nIn the given code snippet, `MatrixXd::Random(3,3)` is a weak random number generator as it uses a non-cryptographic random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides a variety of random number generators that can be used for this purpose. These generators are designed to produce numbers that are statistically random and unpredictable, making them suitable for use in cryptographic applications.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the given code snippet using the C++ Standard Library's `random_device`:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd A = Eigen::MatrixXd::Zero(3,3);\n\nfor(int i=0; i<A.rows(); ++i)\n{\n    for(int j=0; j<A.cols(); ++j)\n    {\n        A(i,j) = dis(gen);\n    }\n}\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister pseudo-random number generator (`std::mt19937`). Then, `std::uniform_real_distribution` is used to generate random numbers in the range [-1, 1]. These numbers are then used to populate the matrix `A`.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/doc/examples/MatrixSine.cpp"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 25,
                  "endLine": 8,
                  "endColumn": 32,
                  "charOffset": 128,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers or even the entire state of the random number generator.\n\nIn the given code example, `MatrixXd::Random(6,6)` is used to generate a 6x6 matrix of random numbers. However, the `Random()` function is not cryptographically secure, making it a potential vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nMatrixXd A(6,6);\nfor(int i=0; i<6; i++)\n    for(int j=0; j<6; j++)\n        A(i,j) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister engine (`std::mt19937`), which is a cryptographically secure pseudorandom number generator. `std::uniform_real_distribution<>` is then used to generate random numbers in the range [-1, 1].\n\n## Library Dependencies\n\nThe code example requires the Eigen library for the `MatrixXd` class and the `<random>` library for the random number generation.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/EigenSolver_EigenSolver_MatrixType.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable outputs and can be exploited by attackers to predict the sequence of random numbers, which can compromise the security of the application.\n\nThe specific vulnerability sink in the provided code is the use of `MatrixXcf::Random(4,4)`, which generates a 4x4 matrix of complex float numbers using a non-cryptographic or weak random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix recommendation using the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXcf A = Eigen::MatrixXcf::NullaryExpr(4,4,[&](){ return std::complex<float>(dis(gen), dis(gen)); });\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/ComplexEigenSolver_compute.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "endLine": 1,
                  "endColumn": 32,
                  "charOffset": 25,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program, leading to security breaches.\n\nIn the given code snippet, `MatrixXf::Random(4,4)` is a weak random number generator as it uses a non-cryptographic random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. In C++, you can use the `<random>` library which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXf A = Eigen::MatrixXf::Zero(4,4);\n\nfor(int i=0; i<4; ++i)\n    for(int j=0; j<4; ++j)\n        A(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n- `<random>`: A standard C++ library for generating random numbers.\n\n## References\n\n- [OWASP - Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/HessenbergDecomposition_matrixH.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers that will be generated. This can lead to a variety of security issues, such as predictable session identifiers, passwords, or other security-sensitive random values.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved by using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nInstead of using `Matrix4Xd::Random(4,5)`, you can use the `std::random_device` and `std::uniform_int_distribution` from the `<random>` library to generate random numbers. Here is an example:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix4Xd M(4,5);\nfor(int i=0; i<M.rows(); ++i)\n    for(int j=0; j<M.cols(); ++j)\n        M(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<random>`: This is a standard library in C++ that provides facilities to generate random numbers.\n- `Eigen/Dense`: This is a part of the Eigen library, which is used for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/DirectionWise_hnormalized.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "endLine": 1,
                  "endColumn": 32,
                  "charOffset": 25,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable random numbers. This can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides the `<random>` header which includes a variety of random number generators, including some that are cryptographically secure.\n\n## Source Code Fix Recommendation\n\nHere is an example of how to use a cryptographically secure random number generator in C++:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nfor (int n=0; n<10; ++n)\n    std::cout << dis(gen) << ' ';\nstd::cout << '\\n';\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` and `<iostream>` libraries from the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/MatrixBase_random_int.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 18,
                  "endLine": 1,
                  "endColumn": 25,
                  "charOffset": 18,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable outputs and can be exploited by attackers to predict the sequence of random numbers, which can compromise the security of the application.\n\nThe specific vulnerability sink in the provided code is the use of `MatrixXcf::Random(4,4)`, which generates a 4x4 matrix of complex float numbers using a non-cryptographic or weak random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix recommendation using the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXcf A = Eigen::MatrixXcf::NullaryExpr(4,4,[&](){ return std::complex<float>(dis(gen), dis(gen)); });\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/ComplexSchur_matrixU.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "endLine": 1,
                  "endColumn": 32,
                  "charOffset": 25,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers that will be generated. This can lead to a variety of security issues, such as predictable session identifiers, passwords, or other security-sensitive random values.\n\nThe specific vulnerability sink in the provided code is the use of `MatrixXf::Random(3,3)`, which uses a non-cryptographic random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved by using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix recommendation for the specific vulnerability sink:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXf A = Eigen::MatrixXf::Zero(3,3);\n\nfor(int i=0; i<A.rows(); ++i)\n    for(int j=0; j<A.cols(); ++j)\n        A(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/doc/examples/MatrixSinh.cpp"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 25,
                  "endLine": 8,
                  "endColumn": 32,
                  "charOffset": 128,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. These generators can produce predictable outcomes, which can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\nIn the given code snippet, `MatrixXi::Random(4,6)` is used to generate a random matrix. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. These generators are designed to produce random numbers that are unpredictable and independent of each other, making them suitable for use in security-sensitive contexts.\n\n## Source Code Fix Recommendation\n\nInstead of using `MatrixXi::Random(4,6)`, you can use a cryptographically secure random number generator. Here is an example using the `<random>` library in C++:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nEigen::MatrixXi A(4,6);\nfor(int i=0; i<4; ++i)\n    for(int j=0; j<6; ++j)\n        A(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/Slicing_rawarray_cxx11.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. These generators can produce predictable outcomes, which can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\nIn the given code snippet, `MatrixXi::Random(4,6)` is used to generate a random matrix. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. These generators are designed to produce random numbers that are unpredictable and independent of each other, making them suitable for use in security-sensitive contexts.\n\n## Source Code Fix Recommendation\n\nInstead of using `MatrixXi::Random(4,6)`, you can use a cryptographically secure random number generator. Here is an example using the `<random>` library in C++:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, 6);\n\nEigen::MatrixXi A(4,6);\nfor(int i=0; i<4; ++i)\n    for(int j=0; j<6; ++j)\n        A(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/Slicing_arrayexpr.cpp"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 23,
                  "endLine": 2,
                  "endColumn": 30,
                  "charOffset": 55,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable outputs and can be exploited by attackers to predict the sequence of random numbers, which can compromise the security of the application.\n\nThe specific vulnerability sink in the provided code is the use of `Matrix3Xd::Random(3,5)`, which generates a matrix of random numbers. If this is used in a security context, it could be a potential vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix3Xd M(3,5);\nfor (int i=0; i<3; ++i)\n    for (int j=0; j<5; ++j)\n        M(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the Eigen library for matrix operations and the `<random>` library for random number generation.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/VectorwiseOp_homogeneous.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "endLine": 1,
                  "endColumn": 32,
                  "charOffset": 25,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers or even the entire state of the random number generator.\n\nIn the given code example, `MatrixXd::Random(6,6)` is used to generate a 6x6 matrix of random numbers. However, the `Random()` function is not cryptographically secure, making it a potential vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nMatrixXd A(6,6);\nfor(int i=0; i<6; i++)\n    for(int j=0; j<6; j++)\n        A(i,j) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister engine (`std::mt19937`), which is a cryptographically secure pseudorandom number generator. `std::uniform_real_distribution<>` is then used to generate random numbers in the range [-1, 1].\n\n## Library Dependencies\n\nThe code example requires the Eigen library for the `MatrixXd` class and the `<random>` library for the random number generation.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/EigenSolver_pseudoEigenvectors.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable outputs and can be exploited by attackers to predict the sequence of random numbers, which can compromise the security of the application.\n\nIn the given code snippet, `b = VectorXf::Random(3)`, a non-cryptographic random number generator is used to generate a vector of random floating point numbers. This can be a potential security vulnerability if the generated random numbers are used in a security-sensitive context.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::VectorXf b(3);\nfor (int i = 0; i < 3; ++i)\n    b(i) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the Eigen library for the `VectorXf` class and the `<random>` library for the random number generator.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/LeastSquaresQR.cpp"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 23,
                  "endLine": 2,
                  "endColumn": 30,
                  "charOffset": 60,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program, leading to security breaches.\n\nThe specific vulnerability sink in the code `m = MatrixXi::Random(2,3)` is that it uses a weak random number generator to create a matrix of random integers. This can lead to predictable outcomes that can be exploited by attackers.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. This will ensure that the generated numbers are unpredictable and cannot be easily guessed by attackers.\n\n## Source Code Fix Recommendation\n\nHere is a source code fix recommendation using the `<random>` library in C++:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(-10, 10);\n\nEigen::MatrixXi m(2,3);\nfor(int i=0; i<m.rows(); ++i)\n    for(int j=0; j<m.cols(); ++j)\n        m(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/MatrixBase_replicate.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" vulnerability refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict future values generated by the random number generator, which can lead to various security issues such as session prediction, password cracking, and other forms of information disclosure.\n\nIn the given code snippet, `MatrixXf::Random(3, 2)` is used to generate a random matrix. However, the `Random` function in Eigen library is not a cryptographic random number generator, and thus it is not suitable for generating values that are meant to be secret or unpredictable.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographic random number generator instead of a weak or non-cryptographic one. In C++, you can use functions provided by libraries such as `<random>` or OpenSSL to generate cryptographic random numbers.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to generate a random matrix using the `<random>` library in C++:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXf A(3, 2);\nfor (int i = 0; i < A.rows(); ++i) {\n    for (int j = 0; j < A.cols(); ++j) {\n        A(i, j) = dis(gen);\n    }\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/LeastSquaresQR.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable outputs and can be exploited by attackers to predict the sequence of random numbers, which can compromise the security of the application.\n\nThe specific vulnerability sink in the provided code is the use of `MatrixXcf::Random(4,4)`, which generates a 4x4 matrix of complex float numbers using a non-cryptographic or weak random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix recommendation using the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXcf A = Eigen::MatrixXcf::NullaryExpr(4,4,[&](){ return std::complex<float>(dis(gen), dis(gen)); });\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/ComplexSchur_compute.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "endLine": 1,
                  "endColumn": 32,
                  "charOffset": 25,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program, leading to security breaches.\n\nThe specific vulnerability sink in the code `m = MatrixXi::Random(2,3)` is that it uses a weak random number generator to create a matrix of random integers. This can lead to predictable outcomes that can be exploited by attackers.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. This will ensure that the generated numbers are unpredictable and cannot be easily guessed by attackers.\n\n## Source Code Fix Recommendation\n\nHere is a source code fix recommendation using the `<random>` library in C++:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(-10, 10);\n\nEigen::MatrixXi m(2,3);\nfor(int i=0; i<m.rows(); ++i)\n    for(int j=0; j<m.cols(); ++j)\n        m(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/DirectionWise_replicate.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program, leading to security breaches.\n\nIn the given code snippet, `MatrixXf::Random(4,4)` is a weak random number generator as it uses a non-cryptographic random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. In C++, you can use the `<random>` library which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXf A = Eigen::MatrixXf::Zero(4,4);\n\nfor(int i=0; i<4; ++i)\n    for(int j=0; j<4; ++j)\n        A(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n- `<random>`: A standard C++ library for generating random numbers.\n\n## References\n\n- [OWASP - Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/RealQZ_compute.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers that will be generated. This can lead to a variety of security issues, such as predictable session identifiers, predictable cryptographic keys, or other security-sensitive random values.\n\nThe specific vulnerability sink in the provided code is the use of `MatrixXf::Random(2, 3)`, which uses a non-cryptographic random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix recommendation using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1.0, 1.0);\n\nEigen::MatrixXf mat(2, 3);\nfor(int i=0; i<2; ++i)\n    for(int j=0; j<3; ++j)\n        mat(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the Eigen library for the `MatrixXf` class.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/Tutorial_AdvancedInitialization_CommaTemporary.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "endLine": 1,
                  "endColumn": 32,
                  "charOffset": 25,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict future values, leading to a breach of security.\n\nIn the given code snippet, `MatrixXd::Random(5,5)` is used to generate a 5x5 matrix of random numbers. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code snippet that uses a cryptographically secure random number generator to generate a 5x5 matrix of random numbers:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd X(5,5);\nfor(int i=0; i<5; ++i)\n    for(int j=0; j<5; ++j)\n        X(i,j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<random>`: This is a standard C++ library that provides facilities to generate random numbers.\n- `Eigen/Dense`: This is a part of the Eigen library, which is used for linear algebra.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver_MatrixType.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers or even the entire state of the random number generator.\n\nThis vulnerability is particularly dangerous in security-sensitive contexts, such as generating cryptographic keys, random nonces, or any other random values that are used in security controls.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for different purposes. For cryptographic purposes, `std::random_device` is recommended, as it is designed to produce non-deterministic random numbers.\n\n## Source Code Fix Recommendation\n\nHere is a code fix for the specific vulnerability sink:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nEigen::Matrix4f X;\nstd::random_device rd;\n\nfor(int i=0; i<X.rows(); i++)\n{\n    for(int j=0; j<X.cols(); j++)\n    {\n        X(i,j) = static_cast <float> (rd()) / static_cast <float> (rd.max());\n    }\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<random>`: This is a standard library in C++ that provides facilities to generate random numbers.\n- `Eigen/Dense`: This is a part of the Eigen library, which is used for linear algebra. The `Dense` module provides Matrix and Array types, as well as operations and functions that operate on these types.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver.cpp"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 23,
                  "endLine": 2,
                  "endColumn": 30,
                  "charOffset": 60,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the random number generator, leading to a breach of security.\n\nIn the given code snippet, `MatrixXd::Random(3,3)` is a weak random number generator as it uses a non-cryptographic random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong cryptographic random number generator. The C++ Standard Library provides a variety of random number generators that can be used for this purpose. These generators are designed to produce numbers that are statistically random and unpredictable, making them suitable for use in cryptographic applications.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the given code snippet using the C++ Standard Library's `random_device`:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd A = Eigen::MatrixXd::Zero(3,3);\n\nfor(int i=0; i<A.rows(); ++i)\n{\n    for(int j=0; j<A.cols(); ++j)\n    {\n        A(i,j) = dis(gen);\n    }\n}\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister pseudo-random number generator (`std::mt19937`). Then, `std::uniform_real_distribution` is used to generate random numbers in the range [-1, 1]. These numbers are then used to populate the matrix `A`.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/PartialPivLU_solve.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, potentially leading to a security breach.\n\nIn the given code snippet, `MatrixXf::Random(4,4)` is used to generate a 4x4 matrix of random floating-point numbers. However, the `Random` function in Eigen library is not cryptographically secure, which makes it a potential vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the given code snippet using the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXf B(4,4);\nfor(int i=0; i<4; ++i)\n    for(int j=0; j<4; ++j)\n        B(i,j) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister random number generator (`std::mt19937`), and `std::uniform_real_distribution` is used to generate random floating-point numbers in the range [-1, 1]. These random numbers are then used to populate the matrix `B`.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n- `<random>`: A standard C++ library for generating random numbers.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/RealQZ_compute.cpp"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 23,
                  "endLine": 2,
                  "endColumn": 30,
                  "charOffset": 59,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict future values, leading to a breach of security.\n\nIn the given code example, `MatrixXd::Random(4,4)` is used to generate a 4x4 matrix of random numbers. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. This ensures that the generated values are unpredictable, making it difficult for an attacker to predict future values.\n\n## Source Code Fix Recommendation\n\nInstead of using `MatrixXd::Random(4,4)`, you can use a cryptographically secure random number generator. Here is an example using the `<random>` library in C++:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd X = Eigen::MatrixXd::Zero(4,4);\n\nfor(int i=0; i<4; ++i)\n    for(int j=0; j<4; ++j)\n        X(i,j) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister engine (`std::mt19937`), which is a cryptographically secure random number generator. `std::uniform_real_distribution<>` is then used to generate random numbers in the range [-1, 1].\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/SelfAdjointEigenSolver_operatorSqrt.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers or even the entire state of the random number generator.\n\nIn the given code snippet, `MatrixXd::Random(3,2)` is used to generate a random matrix. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved by using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nMatrixXd B(3,2);\nfor(int i=0; i<B.size(); i++)\n    B(i) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister random number generator (`std::mt19937`). Then, `std::uniform_real_distribution` is used to generate random numbers in the range [-1, 1], which is the same range as `MatrixXd::Random()`.\n\n## Library Dependencies\n\nThe code example requires the Eigen library for the `MatrixXd` class and the `<random>` library for the random number generation.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/PartialPivLU_solve.cpp"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 23,
                  "endLine": 2,
                  "endColumn": 30,
                  "charOffset": 59,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers or even the entire state of the generator.\n\nIn the given code example, `MatrixXf::Random(3,5)` is used to generate a matrix of random floating point numbers. However, the `Random()` function in Eigen library is not cryptographically secure, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a simple example of how to generate a matrix of random numbers using the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXf m(3,5);\nfor(int i=0; i<m.rows(); ++i)\n    for(int j=0; j<m.cols(); ++j)\n        m(i,j) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed the random number generator, `std::mt19937` is a Mersenne Twister random number generator, and `std::uniform_real_distribution<>` generates random floating point numbers in the range [-1, 1].\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n- `<random>`: A standard C++ library for generating random numbers.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/FullPivLU_kernel.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict future values, leading to a breach of security.\n\nIn the given code example, `MatrixXd::Random(4,4)` is used to generate a 4x4 matrix of random numbers. However, this function uses a non-cryptographic random number generator, which makes it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. This ensures that the generated values are unpredictable, making it difficult for an attacker to predict future values.\n\n## Source Code Fix Recommendation\n\nInstead of using `MatrixXd::Random(4,4)`, you can use a cryptographically secure random number generator. Here is an example using the `<random>` library in C++:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd X = Eigen::MatrixXd::Zero(4,4);\n\nfor(int i=0; i<4; ++i)\n    for(int j=0; j<4; ++j)\n        X(i,j) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister engine (`std::mt19937`), which is a cryptographically secure random number generator. `std::uniform_real_distribution<>` is then used to generate random numbers in the range [-1, 1].\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/snippets/SelfAdjointEigenSolver_operatorInverseSqrt.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 23,
                  "endLine": 1,
                  "endColumn": 30,
                  "charOffset": 23,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, leading to a variety of security issues.\n\nThe specific vulnerability sink in the provided code is the use of `Eigen::ArrayXf::Random(5)`, which generates an array of 5 random floating point numbers. However, the random number generator used by Eigen is not cryptographically secure.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the provided code, using the `std::random_device` and `std::uniform_real_distribution` from the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::ArrayXf a(5);\nfor (int i = 0; i < 5; ++i)\n{\n    a(i) = dis(gen);\n}\n```\n\n## Library Dependencies\n\nThe provided code requires the Eigen library, which is a high-level C++ library for linear algebra. The fixed code also requires the `<random>` library, which is part of the C++ Standard Library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/examples/Tutorial_ArrayClass_cwise_other.cpp"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 37,
                  "endLine": 6,
                  "endColumn": 44,
                  "charOffset": 94,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of random number generators that are not cryptographically strong. These weak random number generators can produce predictable outcomes, which can be exploited by an attacker to predict future values generated by the random number generator. This can lead to various security issues, such as session prediction, password cracking, and other forms of attacks that rely on predicting random values.\n\nIn the provided code snippet, the `Eigen::MatrixXd::Random(n,n).sparseView(0.5,1)` function is used to generate a random matrix. However, the `Random()` function in Eigen library is not a cryptographically secure random number generator.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, you can use functions provided by the `<random>` library, such as `std::random_device` or `std::mt19937` with a seed from `std::random_device`.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix using `std::random_device` and `std::mt19937`:\n\n```cpp\n#include <random>\n#include <Eigen/Sparse>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd matrix(n, n);\nfor (int i = 0; i < n; ++i) {\n    for (int j = 0; j < n; ++j) {\n        matrix(i, j) = dis(gen);\n    }\n}\n\nEigen::SparseMatrix<double> S = matrix.sparseView(0.5, 1);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/examples/matrixfree_cg.cpp"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 51,
                  "endLine": 85,
                  "endColumn": 58,
                  "charOffset": 2746,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable outputs and can be exploited by attackers to predict the sequence of random numbers, which can compromise the security of the application.\n\nThe specific vulnerability sink in the provided code is the use of `Eigen::VectorXf::Random(3)`, which generates a vector of random floating-point numbers. The `Eigen::VectorXf::Random()` function uses a non-cryptographic random number generator, which is not suitable for generating random numbers in a security-sensitive context.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for different purposes. For cryptographic purposes, `std::random_device` is recommended.\n\n## Source Code Fix Recommendation\n\nReplace the use of `Eigen::VectorXf::Random(3)` with a cryptographically secure random number generator. Here is an example of how to do this using `std::random_device`:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::VectorXf b(3);\nfor (int i = 0; i < 3; ++i) {\n    b(i) = dis(gen);\n}\n```\n\n## Library Dependencies\n\nThe provided code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/examples/TutorialLinAlgSVDSolve.cpp"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 40,
                  "endLine": 8,
                  "endColumn": 47,
                  "charOffset": 212,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. These generators can produce predictable outcomes, which can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\nIn the given code snippet, `Eigen::MatrixXf::Random(3, 2)` is used to generate a random matrix. However, Eigen's random number generator is not cryptographically secure, making it vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1.0, 1.0);\n\nEigen::MatrixXf A(3, 2);\nfor(int i=0; i<A.size(); i++)\n    A(i) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister engine (`std::mt19937`), which is a cryptographically secure pseudorandom number generator. `std::uniform_real_distribution` is then used to generate random floating-point numbers between -1.0 and 1.0, which are used to populate the matrix.\n\n## Library Dependencies\n\nThe code example requires the Eigen library for matrix operations and the `<random>` library for random number generation.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/examples/TutorialLinAlgSVDSolve.cpp"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 40,
                  "endLine": 6,
                  "endColumn": 47,
                  "charOffset": 97,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the system, leading to a variety of security issues.\n\nIn the provided code snippet, the `Random()` function from the Eigen library is used to generate a random matrix. This function uses a non-cryptographic random number generator, which makes it vulnerable to this issue.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the provided code snippet:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mat(10, 10);\nfor (int i = 0; i < mat.rows(); ++i)\n    for (int j = 0; j < mat.cols(); ++j)\n        mat(i, j) = dis(gen);\n\nEigen::FullPivLU<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>> lu(mat);\n```\n\nIn this code, a Mersenne Twister generator (`std::mt19937`) is used, which is a cryptographically secure random number generator. The `std::uniform_real_distribution` is used to generate random numbers in the range [-1, 1], which is the same range as the `Random()` function from the Eigen library.\n\n## Library Dependencies\n\nThe provided code snippet requires the Eigen library to execute properly.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/fullpivlu_int.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 80,
                  "endLine": 13,
                  "endColumn": 87,
                  "charOffset": 229,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C functions in C++ code. These functions are often prohibited because they can lead to serious security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In this case, the function `alloca()` is used, which is considered unsafe because it allocates memory on the stack, which can lead to stack overflow if the size of the allocation is too large or controlled by an attacker.\n\n## Mitigation Advice\n\nAvoid using `alloca()` function. Instead, use safer alternatives such as `malloc()`, `calloc()`, or `new` for memory allocation. These functions allocate memory on the heap, which is safer and less likely to cause stack overflow. Also, always check the value of `N` before using it to allocate memory to prevent integer overflow and ensure that the size of the allocation is within acceptable limits.\n\n## Source Code Fix Recommendation\n\nReplace the `alloca()` function with `malloc()`, `calloc()`, or `new`. Here is an example of how to do it:\n\n```cpp\n// Old code\n// int* jpiv = (int*)alloca(sizeof(int)*N);\n\n// New code\nint* jpiv = (int*)malloc(sizeof(int)*N);\nif (jpiv == NULL) {\n    // Handle error\n}\n```\n\nRemember to free the allocated memory when it is no longer needed:\n\n```cpp\nfree(jpiv);\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n```cpp\n#include <stdlib.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/libs/BLAS/blas_interface_impl.hh"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 23,
                  "endLine": 105,
                  "endColumn": 29,
                  "charOffset": 3776,
                  "charLength": 6,
                  "snippet": {
                    "text": "alloca",
                    "rendered": {
                      "text": "alloca",
                      "markdown": "`alloca`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C functions in C++ code. In this case, the function `alloca()` is used, which is considered unsafe. The `alloca()` function dynamically allocates memory on the stack, which can lead to buffer overflow vulnerabilities if not properly managed. This is because the allocated memory does not have the same protections as memory allocated on the heap, and the function does not provide any mechanism for error handling if the stack overflows.\n\n## Mitigation Advice\n\nAvoid using `alloca()` function. Instead, use safer alternatives such as `malloc()`, `calloc()`, or `new` for dynamic memory allocation. These functions allocate memory on the heap and include error handling mechanisms. \n\n## Source Code Fix Recommendation\n\nReplace the `alloca()` function with a safer alternative. For example, you can use `new` as follows:\n\n```cpp\nint* ipiv = new int[N];\n```\n\nRemember to free the allocated memory when it is no longer needed:\n\n```cpp\ndelete[] ipiv;\n```\n\n## Library Dependencies\n\nThe code example does not require any specific library dependencies.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/libs/BLAS/blas_interface_impl.hh"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 23,
                  "endLine": 104,
                  "endColumn": 29,
                  "charOffset": 3730,
                  "charLength": 6,
                  "snippet": {
                    "text": "alloca",
                    "rendered": {
                      "text": "alloca",
                      "markdown": "`alloca`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C functions in C++ code. In this case, the function `alloca()` is used, which is considered unsafe. The `alloca()` function dynamically allocates memory on the stack, which can lead to buffer overflow vulnerabilities if not properly managed. This is because the allocated memory does not have the same protections as memory allocated on the heap, and the function does not provide any mechanism for error handling if the stack overflows.\n\n## Mitigation Advice\n\nAvoid using `alloca()` function. Instead, use safer alternatives such as `malloc()`, `calloc()`, or `new` for dynamic memory allocation. These functions allocate memory on the heap and include error handling mechanisms. \n\n## Source Code Fix Recommendation\n\nReplace the `alloca()` function with a safer alternative. For example, you can use `new` as follows:\n\n```cpp\nint* ipiv = new int[N];\n```\n\nRemember to free the allocated memory when it is no longer needed:\n\n```cpp\ndelete[] ipiv;\n```\n\n## Library Dependencies\n\nThe code example does not require any specific library dependencies.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/libs/BLAS/blas_interface_impl.hh"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 23,
                  "endLine": 79,
                  "endColumn": 29,
                  "charOffset": 2722,
                  "charLength": 6,
                  "snippet": {
                    "text": "alloca",
                    "rendered": {
                      "text": "alloca",
                      "markdown": "`alloca`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict future values and compromise the security of the system.\n\nIn the provided code snippet, the `Random()` function from the Eigen library is used to generate a random matrix. This function uses a non-cryptographic random number generator, which makes it vulnerable to this type of attack.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographic random number generator. These generators are designed to produce numbers that are unpredictable and independent of each other, making them suitable for use in security-sensitive contexts.\n\nIn C++, the `<random>` library provides a variety of cryptographic random number generators, such as `std::random_device` and `std::mt19937`. These can be used to replace non-cryptographic generators in your code.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the provided code snippet, using the `std::random_device` generator from the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix<SCALAR,Dynamic,Dynamic> mat(10,10);\nfor(int i=0; i<mat.size(); i++)\n    mat(i) = dis(gen);\n\nqr = BDCSVD.BDCSVD(mat);\n```\n\nIn this code, `std::random_device` is used to seed the `std::mt19937` generator, which is then used to generate random floating-point numbers between -1 and 1. These numbers are used to fill the matrix.\n\n## Library Dependencies\n\nThe provided code snippet requires the following libraries to execute properly:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/bdcsvd_int.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 77,
                  "endLine": 13,
                  "endColumn": 84,
                  "charOffset": 227,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable randomness which can be exploited by an attacker to predict future random numbers generated by the program. This can lead to a variety of security issues, such as predictable session identifiers, passwords, or cryptographic keys.\n\nThe specific vulnerability sink in the provided code is the use of the `Random()` function from the Eigen library to generate a random matrix for the Householder QR decomposition. This function uses a non-cryptographic random number generator, which could lead to predictable randomness.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nReplace the `Random()` function with a cryptographically secure random number generator. Here is an example using the `std::random_device` from the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix<SCALAR,Dynamic,Dynamic> mat(10,10);\nfor(int i=0; i<10; ++i)\n    for(int j=0; j<10; ++j)\n        mat(i,j) = dis(gen);\n\nqr = HouseholderQR.HouseholderQR(mat);\n```\n\n## Library Dependencies\n\nThe provided code example requires the Eigen library to execute properly.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/qr_int.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 84,
                  "endLine": 13,
                  "endColumn": 91,
                  "charOffset": 233,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers or even the entire state of the generator.\n\nIn the provided code example, `MatrixXd::Random(100,50)` is used to generate a matrix of random numbers. However, the `Random()` function from the Eigen library is not cryptographically secure, making it a potential vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of generators that can be used for different purposes. For cryptographic purposes, `std::random_device` is often a good choice.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the provided code example:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd b(100,50);\nfor(int i=0; i<b.rows(); ++i)\n    for(int j=0; j<b.cols(); ++j)\n        b(i,j) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed a Mersenne Twister generator (`std::mt19937`), which is then used to generate random numbers with a uniform distribution between -1 and 1. These numbers are used to fill the matrix `b`.\n\n## Library Dependencies\n\nThe provided code example requires the Eigen library. The fixed code also requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/examples/TutorialLinAlgExComputeSolveError.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 26,
                  "endLine": 9,
                  "endColumn": 33,
                  "charOffset": 150,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program's operations that rely on these random values, leading to a variety of security issues.\n\nIn the given code snippet, `MatrixXd::Random(100,100)` is used to generate a 100x100 matrix of random numbers. However, the `Random()` function from the Eigen library is not a cryptographic random number generator, and thus it is not suitable for generating random numbers in a security-sensitive context.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a strong cryptographic random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for different purposes. For cryptographic purposes, `std::random_device` is often a good choice.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the given code snippet using `std::random_device`:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::MatrixXd A(100, 100);\nfor (int i = 0; i < 100; ++i)\n    for (int j = 0; j < 100; ++j)\n        A(i, j) = dis(gen);\n```\n\nIn this code, `std::random_device` is used to seed a Mersenne Twister random number generator (`std::mt19937`), which is then used to generate random numbers in the range [-1, 1] using `std::uniform_real_distribution`.\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n- `<random>`: A standard C++ library for generating random numbers.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "doc/examples/TutorialLinAlgExComputeSolveError.cpp"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 26,
                  "endLine": 8,
                  "endColumn": 33,
                  "charOffset": 107,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the values generated by the random number generator, which can lead to various security issues such as session prediction, password cracking, and other forms of information leakage.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong, cryptographic random number generator that produces non-predictable and non-repeating numbers. In C++, this can be achieved by using the `<random>` library, which provides a variety of random number generators that can be used for different purposes.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the given code:\n\n```cpp\n#include <Eigen/Dense>\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mat(10, 10);\nfor (int i = 0; i < mat.rows(); ++i)\n    for (int j = 0; j < mat.cols(); ++j)\n        mat(i, j) = dis(gen);\n\nEigen::JacobiSVD<Eigen::MatrixXd> svd(mat);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/jacobisvd_int.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 80,
                  "endLine": 13,
                  "endColumn": 87,
                  "charOffset": 230,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, leading to potential security risks.\n\nIn the provided code snippet, the `Matrix::Random()` function is used to generate a random matrix. This function uses a non-cryptographic random number generator, which makes it vulnerable to this type of attack.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the provided code snippet using the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix<SCALAR,Dynamic,Dynamic> mat(10,10);\nfor(int i=0; i<mat.size(); i++)\n    mat(i) = dis(gen);\n\nllt = LLT.LLT(mat);\n```\n\n## Library Dependencies\n\nThe provided code snippet requires the Eigen library to execute properly.\n\n## OWASP and CWE Links\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/llt_int.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 75,
                  "endLine": 13,
                  "endColumn": 82,
                  "charOffset": 230,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program's operations that rely on these random values, leading to a variety of security issues.\n\nIn the provided code snippet, the EigenSolver is using a non-cryptographic random number generator to create a 10x10 matrix. This could potentially lead to predictable matrix values, which could be exploited in a variety of ways depending on the context of the program.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong, cryptographic random number generator. This will ensure that the generated values are unpredictable and secure against potential attacks.\n\n## Source Code Fix Recommendation\n\nThe code should be modified to use a cryptographic random number generator. Unfortunately, Eigen library does not provide a cryptographic random number generator. You would need to generate the random numbers using a cryptographic library and then populate the matrix. Here is an example using the OpenSSL library:\n\n```cpp\n#include <Eigen/Dense>\n#include <openssl/rand.h>\n\nEigen::MatrixXf RandomMatrix(int rows, int cols) {\n    Eigen::MatrixXf m(rows, cols);\n    for (int i = 0; i < m.rows(); ++i) {\n        for (int j = 0; j < m.cols(); ++j) {\n            unsigned char buffer[4];\n            if (RAND_bytes(buffer, 4) != 1) {\n                // handle error\n            }\n            float random_value = *reinterpret_cast<float*>(buffer);\n            m(i, j) = random_value;\n        }\n    }\n    return m;\n}\n\nint main() {\n    Eigen::EigenSolver<Eigen::MatrixXf> eig;\n    eig.compute(RandomMatrix(10, 10), /* computeEigenvectors = */ true);\n    // ...\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- Eigen\n- OpenSSL\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/eigensolver_int.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 83,
                  "endLine": 13,
                  "endColumn": 90,
                  "charOffset": 241,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program's operations that rely on these random values, leading to a variety of security issues.\n\nIn the provided code snippet, the EigenSolver is using a non-cryptographic random number generator to create a 10x10 matrix. This could potentially lead to predictable matrix values, which could be exploited in a variety of ways depending on the context of the program.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong, cryptographic random number generator. This will ensure that the generated values are unpredictable and secure against potential attacks.\n\n## Source Code Fix Recommendation\n\nThe code should be modified to use a cryptographic random number generator. Unfortunately, Eigen library does not provide a cryptographic random number generator. You would need to generate the random numbers using a cryptographic library and then populate the matrix. Here is an example using the OpenSSL library:\n\n```cpp\n#include <Eigen/Dense>\n#include <openssl/rand.h>\n\nEigen::MatrixXf RandomMatrix(int rows, int cols) {\n    Eigen::MatrixXf m(rows, cols);\n    for (int i = 0; i < m.rows(); ++i) {\n        for (int j = 0; j < m.cols(); ++j) {\n            unsigned char buffer[4];\n            if (RAND_bytes(buffer, 4) != 1) {\n                // handle error\n            }\n            float random_value = *reinterpret_cast<float*>(buffer);\n            m(i, j) = random_value;\n        }\n    }\n    return m;\n}\n\nint main() {\n    Eigen::EigenSolver<Eigen::MatrixXf> eig;\n    eig.compute(RandomMatrix(10, 10), /* computeEigenvectors = */ true);\n    // ...\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- Eigen\n- OpenSSL\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/eigensolver_cplx.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 83,
                  "endLine": 13,
                  "endColumn": 90,
                  "charOffset": 258,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. These generators can produce predictable outcomes, which can be exploited by attackers to predict the sequence of random numbers and compromise the security of the system.\n\nThe specific vulnerability sink in the provided code is the use of the `Random()` function from the Eigen library to generate a random matrix for the `PartialPivLU` function. This function is not cryptographically secure and can produce predictable outcomes.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nReplace the `Random()` function with a cryptographically secure random number generator. Here is an example using the `std::random_device` from the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix<SCALAR,Dynamic,Dynamic> mat(10,10);\nfor(int i=0; i<10; ++i)\n    for(int j=0; j<10; ++j)\n        mat(i,j) = dis(gen);\n\nlu = PartialPivLU.PartialPivLU(mat);\n```\n\n## Library Dependencies\n\nThe provided code requires the Eigen library to execute properly.\n\n## OWASP and CWE Resources\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/partialpivlu_int.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 83,
                  "endLine": 13,
                  "endColumn": 90,
                  "charOffset": 232,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, leading to a variety of security issues.\n\nIn the provided code snippet, the `Matrix::Random()` function is used to generate a random matrix. This function uses a non-cryptographic random number generator, which makes it vulnerable to this issue.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the provided code snippet:\n\n```cpp\n#include <Eigen/Dense>\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mat(10, 10);\nfor (int i = 0; i < mat.rows(); ++i)\n    for (int j = 0; j < mat.cols(); ++j)\n        mat(i, j) = dis(gen);\n\nauto qr = mat.fullPivHouseholderQr();\n```\n\nIn this fix, a `std::mt19937` generator is used, which is a Mersenne Twister generator that is suitable for cryptographic use. The `std::uniform_real_distribution` is used to generate random numbers in the range [-1, 1].\n\n## Library Dependencies\n\nThe provided code snippet requires the Eigen library to execute properly.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/fullpivqr_int.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 91,
                  "endLine": 13,
                  "endColumn": 98,
                  "charOffset": 240,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\"",
            "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses a function that is considered unsafe. This is because these functions do not perform bounds checking or other necessary validation, which can lead to buffer overflows, integer overflows, or other types of vulnerabilities. In this case, the function `atoi()` is used, which can lead to integer overflow if the input string represents a number larger than what can be stored in an `int`.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions that perform necessary validation. For `atoi()`, a safer alternative is `strtol()`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is how you can do it:\n\n```cpp\nchar *end;\nlong window_half_width = strtol(argv[2], &end, 10);\nif (end == argv[2] || *end != '\\0' || errno == ERANGE) {\n    // handle error\n}\n```\n\nIn this code, `strtol()` is used to convert the string to a `long`. If the conversion is unsuccessful, `end` will be equal to `argv[2]`, if the string contains additional characters after the number, `*end` will not be `'\\0'`, and if the number is out of range, `errno` will be `ERANGE`. In any of these cases, you should handle the error appropriately.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `stdlib.h` for `strtol()`\n- `errno.h` for `errno`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/data/smooth.cxx"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 24,
                  "endLine": 49,
                  "endColumn": 28,
                  "charOffset": 1895,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\"",
            "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of certain C functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other security issues. In this case, the function `atoi()` is used, which can lead to integer overflow or underflow if the input is not properly validated.\n\n`atoi()` converts a string to an integer, but it does not perform any error checking. If the string cannot be converted into an integer, it returns zero, which may not be the expected behavior. Moreover, if the string represents a number outside the range of representable values, the behavior is undefined.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use safer alternatives that perform error checking. In C++, you can use `std::stoi()` or `std::stol()` functions, which throw an exception if the conversion cannot be performed.\n\n## Source Code Fix Recommendation\n\nReplace `atoi()` with `std::stoi()` or `std::stol()`. Here is the fixed code:\n\n```cpp\ntry {\n    start_cut_size = std::stoi(argv[2]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<string>`: This library is needed for the `std::stoi()` function.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/data/regularize.cxx"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 21,
                  "endLine": 48,
                  "endColumn": 25,
                  "charOffset": 1740,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which can lead to integer overflow if the input string represents a number larger than `INT_MAX`.\n\n## Mitigation Advice\n\nAvoid using insecure C library functions. Instead, use safer alternatives provided by the C++ Standard Library. For instance, instead of `atoi()`, you can use `std::stoi()` which throws an exception if the conversion fails or if the converted value is out of range.\n\n## Source Code Fix Recommendation\n\nReplace `atoi(argv[3])` with `std::stoi(argv[3])`. Make sure to handle the possible exceptions.\n\n```cpp\n#include <string>\n#include <stdexcept>\n\nint stop_cut_size;\ntry {\n    stop_cut_size = std::stoi(argv[3]);\n} catch (std::invalid_argument& e) {\n    // Handle exception: input string does not represent a valid integer\n} catch (std::out_of_range& e) {\n    // Handle exception: converted value would fall out of the range of the result type\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: for `std::stoi()`\n- `<stdexcept>`: for `std::invalid_argument` and `std::out_of_range`\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/data/regularize.cxx"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 20,
                  "endLine": 49,
                  "endColumn": 24,
                  "charOffset": 1775,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable patterns in the generated numbers, which can be exploited by attackers to predict future numbers that will be generated. This can lead to a variety of security issues, such as predictable session identifiers, passwords, or other security-sensitive random values.\n\nThe specific vulnerability sink in the provided code is the use of the `Random()` function from the Eigen library to generate a random matrix. This function uses a non-cryptographic random number generator, which can lead to the issues described above.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a possible fix for the provided code, using the `std::random_device` from the `<random>` library to generate random numbers:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix<SCALAR,Dynamic,Dynamic> mat(10,10);\nfor(int i=0; i<mat.size(); i++)\n    mat(i) = dis(gen);\n\nldlt = LDLT.LDLT(mat);\n```\n\n## Library Dependencies\n\nThe provided code requires the Eigen library to execute properly.\n\n## OWASP and CWE Links\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/ldlt_int.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 77,
                  "endLine": 13,
                  "endColumn": 84,
                  "charOffset": 232,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the values generated by the random number generator, which can lead to various security issues such as session prediction, password cracking, and other forms of information leakage.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use strong cryptographic random number generators. In C++, this can be achieved by using the `<random>` library which provides facilities to generate random numbers with high quality of randomness.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the given code:\n\n```cpp\n#include <Eigen/Dense>\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mat(10, 10);\nfor (int i = 0; i < mat.rows(); ++i)\n    for (int j = 0; j < mat.cols(); ++j)\n        mat(i, j) = dis(gen);\n\nEigen::ColPivHouseholderQR<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>> qr(mat);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "failtest/colpivqr_int.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 90,
                  "endLine": 13,
                  "endColumn": 97,
                  "charOffset": 239,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In the provided code snippet, the function `atoi()` is used, which is a prohibited C function. The `atoi()` function converts a string to an integer and it does not perform any error checking. This can lead to undefined behavior if the string cannot be converted to an integer.\n\n## Mitigation Advice\n\nAvoid using insecure C library functions. Instead, use safer alternatives that perform error checking. For example, instead of `atoi()`, you can use `strtol()` or `sscanf()`, which provide error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()` or `sscanf()`. Here is an example of how to use `strtol()`:\n\n```cpp\nchar *end;\nlong int max_in_cache = strtol(argv[3], &end, 10);\nif (end == argv[3] || *end != '\\0' || errno == ERANGE) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `stdlib.h` for `strtol()`\n- `errno.h` for `errno`\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/data/mean.cxx"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 19,
                  "endLine": 74,
                  "endColumn": 23,
                  "charOffset": 2370,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\"",
            "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that occurs when a C++ program uses a function that is considered unsafe due to its potential to cause buffer overflows, format string vulnerabilities, or other types of security issues. In this case, the function `atoi()` is used, which is a standard library function that converts a string to an integer. The problem with `atoi()` is that it does not perform any error checking, so if the input string is not a valid integer, it will return an undefined value, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should replace the `atoi()` function with a safer alternative that performs error checking, such as `strtol()`, `sscanf()`, or `stoi()` in C++. These functions will allow you to detect and handle invalid input, preventing potential security issues.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the code:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n#include <climits>\n\nchar *endptr;\nlong val = strtol(argv[5], &endptr, 10);\n\nif ((errno == ERANGE && (val == LONG_MAX || val == LONG_MIN)) || (errno != 0 && val == 0)) {\n    perror(\"strtol\");\n    exit(EXIT_FAILURE);\n}\n\nif (endptr == argv[5]) {\n    fprintf(stderr, \"No digits were found\\n\");\n    exit(EXIT_FAILURE);\n}\n\nmax_out_of_cache = val;\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: for `strtol()` and `exit()`\n- `<cerrno>`: for `errno`\n- `<climits>`: for `LONG_MAX` and `LONG_MIN`\n\n## References\n\n- [OWASP Prohibited C Functions](https://owasp.org/www-community/attacks/Format_string_attack)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/data/mean.cxx"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 23,
                  "endLine": 76,
                  "endColumn": 27,
                  "charOffset": 2446,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or integer overflow attacks. In this case, the `atoi()` function is used, which can lead to integer overflow if the input string represents a number larger than `INT_MAX`.\n\n## Mitigation Advice\n\nAvoid using the `atoi()` function as it does not check for errors. Instead, use safer alternatives such as `strtol()` or `sscanf()`, which provide error checking. Always validate and sanitize user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is the corrected code:\n\n```cpp\n#include <cstdlib>\n#include <climits>\n\nchar *p;\nlong converted = strtol(argv[2], &p, 10);\nif (*p != '\\0' || converted > INT_MAX) {\n    // handle error\n}\nmin_in_cache = static_cast<int>(converted);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- climits\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/data/mean.cxx"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 19,
                  "endLine": 73,
                  "endColumn": 23,
                  "charOffset": 2336,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure or unsafe C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which is a prohibited function because it does not perform any error checking and can lead to integer overflow.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform error checking. For example, instead of `atoi()`, you can use `strtol()` which allows you to check for errors.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is how you can do it:\n\n```cpp\n#include <cstdlib> // for strtol and errno\n#include <cerrno> // for errno\n#include <climits> // for LONG_MIN and LONG_MAX\n\nchar *end;\nlong min_out_of_cache = strtol(argv[4], &end, 10);\n\nif (end == argv[4] || *end != '\\0' || errno == ERANGE || min_out_of_cache < LONG_MIN || min_out_of_cache > LONG_MAX) {\n    // handle error\n}\n```\n\nIn this code, `strtol()` is used to convert the string to a long integer. It allows you to check for various errors such as if the string does not contain any digits, if it contains invalid characters, or if the number is out of range.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- cstdlib\n- cerrno\n- climits\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices Guide](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [OWASP Proactive Controls](https://owasp.org/www-project-proactive-controls/)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/data/mean.cxx"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 23,
                  "endLine": 75,
                  "endColumn": 27,
                  "charOffset": 2408,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the program, leading to potential security risks.\n\nIn the given code snippet, `VectorXf::Random(cols)` is used to generate random numbers. However, this function does not use a cryptographically secure random number generator, making it vulnerable to this issue.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the given code snippet:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\n// ...\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::VectorXf x(cols);\nfor (int i = 0; i < cols; ++i) {\n    x(i) = dis(gen);\n}\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister random number generator (`std::mt19937`), which is then used to generate random floating-point numbers in the range [-1, 1] using `std::uniform_real_distribution<>`.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<random>`: This is a standard library in C++ that provides facilities to generate random numbers.\n- `Eigen/Dense`: This is a part of the Eigen library, which is used for linear algebra, matrix and vector operations, numerical solvers, and related algorithms.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/sparse_cholesky.cpp"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 25,
                  "endLine": 85,
                  "endColumn": 32,
                  "charOffset": 2732,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of random number generators that are not cryptographically strong. These weak random number generators can produce predictable outcomes, which can be exploited by an attacker to predict future values generated by the random number generator. This can lead to a variety of security issues, such as session prediction, password cracking, and other forms of attacks that rely on predicting random values.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a strong, cryptographically secure random number generator. In C++, this can be achieved by using the `<random>` library, which provides a variety of random number generators that are suitable for generating cryptographically secure random numbers.\n\n## Source Code Fix Recommendation\n\nHere is a code fix for the specific vulnerability sink:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(-1, 1);\n\nEigen::VectorXf b(cols);\nfor(int i=0; i<cols; i++)\n{\n    b(i) = dis(gen);\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n- `<random>`: A standard library in C++ for generating random numbers.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/sparse_cholesky.cpp"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 25,
                  "endLine": 84,
                  "endColumn": 32,
                  "charOffset": 2693,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\"",
            "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In this case, the `getenv` function is used, which can lead to security vulnerabilities if the environment variable is controlled by an attacker.\n\n## Mitigation Advice\n\nAvoid using insecure C library functions. Instead, use safer alternatives that perform bounds checking or other forms of validation. In the case of `getenv`, consider the security implications of using environment variables for sensitive configuration data. If an attacker can control the environment in which your program runs, they can control the values returned by `getenv`.\n\n## Source Code Fix Recommendation\n\nIf you must use environment variables, validate the values returned by `getenv` before using them. For example:\n\n```cpp\nconst char* config = getenv(\"BTL_CONFIG\");\nif (config == nullptr) {\n    // Handle error: environment variable not set\n} else if (strlen(config) > MAX_CONFIG_LENGTH) {\n    // Handle error: environment variable value too long\n} else {\n    _config = config;\n}\n```\n\n## Library Dependencies\n\nThe `getenv` function is part of the C standard library, so no additional libraries are required.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/generic_bench/btl.hh"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 14,
                  "endLine": 170,
                  "endColumn": 20,
                  "charOffset": 4995,
                  "charLength": 6,
                  "snippet": {
                    "text": "getenv",
                    "rendered": {
                      "text": "getenv",
                      "markdown": "`getenv`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which can lead to integer overflow if the input string represents a number larger than `INT_MAX`.\n\n## Mitigation Advice\n\nAvoid using C library functions that do not perform bounds checking or that may fail silently. Instead, use safer alternatives provided by the C++ Standard Library. For instance, instead of `atoi()`, you can use `std::stoi()` which throws an exception if the conversion fails or if the converted value is out of range.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `std::stoi()`. Here is the fixed code:\n\n```cpp\ntry {\n    Instance.tries = std::stoi(config[i+1].c_str());\n} catch (const std::invalid_argument& ia) {\n    // Handle the exception\n} catch (const std::out_of_range& oor) {\n    // Handle the exception\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>` for `atoi()`\n- `<string>` for `std::stoi()`\n\n## References\n\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/btl/generic_bench/btl.hh"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 27,
                  "endLine": 194,
                  "endColumn": 31,
                  "charOffset": 5717,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the system, leading to a variety of attacks such as brute force attacks, session prediction, and more.\n\nThe specific vulnerability sink in the provided code is the use of `DenseVector::Random(cols)`. This function generates a vector of random numbers, but it does not guarantee that these numbers are cryptographically secure.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a code fix recommendation using the `<random>` library:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> dis(1, cols);\n\nx = dis(gen);\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<random>`\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/sparse_trisolver.cpp"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 31,
                  "endLine": 66,
                  "endColumn": 38,
                  "charOffset": 1654,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of random number generators that are not cryptographically secure. This can lead to predictable values being generated, which can be exploited by an attacker to predict the behavior of the system, leading to a variety of attacks such as brute force attacks, session prediction, and more.\n\nIn the given code snippet, `DenseVector::Random(cols)` is a function that generates a random number. If this function uses a non-cryptographic or weak random number generator, it could be a potential security vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographically secure random number generator. In C++, this can be achieved by using the `<random>` library, which provides a variety of random number generators that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the given code snippet:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_int_distribution<> distr(0, cols);\n\nb = distr(gen);\n```\n\nIn this code, `std::random_device` is a uniformly-distributed integer random number generator that produces non-deterministic random numbers. `std::mt19937` is a Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits. `std::uniform_int_distribution` produces random integers in a range [a, b].\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/sparse_trisolver.cpp"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 31,
                  "endLine": 65,
                  "endColumn": 38,
                  "charOffset": 1609,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Weak or Non-Cryptographic Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Weak or Non-Cryptographic Random Number Generators\" refers to the use of weak or non-cryptographic random number generators that can lead to predictable or easily guessable values. This can be exploited by attackers to predict the outcome of the program's operations that rely on these random values, leading to a variety of security issues.\n\nIn the given code snippet, `a = MatrixType::Random(rows,cols)`, a weak random number generator might be used to generate the random matrix, which could lead to predictable matrices and compromise the security of the program.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use strong cryptographic random number generators. In C++, this can be achieved by using the `<random>` library, which provides a variety of random number generators that can be used for different purposes. \n\n## Source Code Fix Recommendation\n\nHere is a sample code fix using the `<random>` library:\n\n```cpp\n#include <random>\n#include <Eigen/Dense>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(0, 1);\n\nEigen::MatrixXd a = Eigen::MatrixXd::Zero(rows, cols);\n\nfor (int i = 0; i < rows; i++)\n    for (int j = 0; j < cols; j++)\n        a(i, j) = dis(gen);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Eigen: A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms.\n\n## References\n\n- [OWASP - Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/benchCholesky.cpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 29,
                  "endLine": 45,
                  "endColumn": 36,
                  "charOffset": 942,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS148264",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators",
            "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of non-cryptographic or weak random number generators that can lead to predictable values and thus can be exploited by an attacker. This vulnerability can lead to a variety of security issues, such as password cracking, session hijacking, and other forms of attacks that rely on predicting random values.\n\nThe specific vulnerability sink in the provided code is the `random_shuffle()` function. This function uses a non-cryptographic random number generator, which can lead to predictable shuffling of the `benchmarks` vector.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use a cryptographic random number generator. In C++, this can be achieved by using the `random_device` class from the `<random>` library, which is designed to produce non-deterministic random numbers.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code:\n\n```cpp\n#include <random>\n#include <algorithm>\n\n// ...\n\nstd::random_device rd;\nstd::mt19937 g(rd());\n\nstd::shuffle(benchmarks.begin(), benchmarks.end(), g);\n```\n\nIn this code, `std::random_device` is used to seed the Mersenne Twister engine (`std::mt19937`), which is a cryptographic random number generator. Then, `std::shuffle()` is used instead of `random_shuffle()`, with the Mersenne Twister engine as the random number generator.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<random>`: for `std::random_device` and `std::mt19937`.\n- `<algorithm>`: for `std::shuffle()`.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/benchmark-blocking-sizes.cpp"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 4,
                  "endLine": 528,
                  "endColumn": 19,
                  "charOffset": 17285,
                  "charLength": 15,
                  "snippet": {
                    "text": "random_shuffle(",
                    "rendered": {
                      "text": "random_shuffle(",
                      "markdown": "`random_shuffle(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured Web Link Vulnerability",
            "markdown": "## Description\n\nUnsecured Web Link Vulnerability refers to the security risk associated with the use of unsecured HTTP links in a C++ program. When a program uses an unsecured HTTP link, it exposes the data being transmitted to potential interception, manipulation, or theft. This is because HTTP traffic is not encrypted, unlike HTTPS traffic. This vulnerability can lead to serious security breaches, including data leakage, session hijacking, and man-in-the-middle attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure HTTPS links instead of HTTP. HTTPS encrypts the data being transmitted, making it much more difficult for attackers to intercept or manipulate it. Additionally, validate all URLs and do not trust user input without validation.\n\n## Source Code Fix Recommendation\n\nReplace the unsecured HTTP link with a secure HTTPS link:\n\n```cpp\n// Vulnerable code\nstd::string url = \"http://mozilla.org\";\n\n// Recommended fix\nstd::string url = \"https://mozilla.org\";\n```\n\n## Library Dependencies\n\nThe specific code example does not require any library dependencies to execute properly.\n\n## References\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unsupported/bench/bench_svd.cpp"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 41,
                  "endLine": 11,
                  "endColumn": 59,
                  "charOffset": 524,
                  "charLength": 18,
                  "snippet": {
                    "text": "http://mozilla.org",
                    "rendered": {
                      "text": "http://mozilla.org",
                      "markdown": "`http://mozilla.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "unsupported/bench/bench_svd.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 524,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "https://mozilla.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS137138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unsecured Web Link Vulnerability",
            "markdown": "## Description\n\nUnsecured Web Link Vulnerability refers to the security risk associated with the use of unsecured HTTP links in a C++ program. When a program uses an unsecured HTTP link, it exposes the data being transmitted to potential interception, manipulation, or theft. This is because HTTP traffic is not encrypted, unlike HTTPS traffic. This vulnerability can lead to serious security breaches, including data leakage, session hijacking, and man-in-the-middle attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use secure HTTPS links instead of HTTP. HTTPS encrypts the data being transmitted, making it much more difficult for attackers to intercept or manipulate it. Additionally, validate all URLs and do not trust user input without validation.\n\n## Source Code Fix Recommendation\n\nReplace the unsecured HTTP link with a secure HTTPS link:\n\n```cpp\n// Vulnerable code\nstd::string url = \"http://mozilla.org\";\n\n// Recommended fix\nstd::string url = \"https://mozilla.org\";\n```\n\n## Library Dependencies\n\nThe specific code example does not require any library dependencies to execute properly.\n\n## References\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "demos/mix_eigen_and_c/example.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 41,
                  "endLine": 8,
                  "endColumn": 59,
                  "charOffset": 329,
                  "charLength": 18,
                  "snippet": {
                    "text": "http://mozilla.org",
                    "rendered": {
                      "text": "http://mozilla.org",
                      "markdown": "`http://mozilla.org`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "demos/mix_eigen_and_c/example.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 329,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "https://mozilla.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In the provided code snippet, the `fopen` function is used, which can lead to vulnerabilities if the filename is manipulated by an attacker.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. In the case of file operations, C++ provides a safer alternative in the form of file stream objects (`fstream`, `ifstream`, `ofstream`).\n\n## Source Code Fix Recommendation\n\nReplace the `fopen` function with the `ifstream` object from the `<fstream>` library. Here is how you can do it:\n\n```cpp\n#include <fstream>\n\nstd::ifstream file(filename);\nif (!file) {\n    // Handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<cstdio>` or `<stdio.h>` for `fopen`\n\nThe fixed code requires the following library:\n\n- `<fstream>` for `ifstream`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/benchmark-blocking-sizes.cpp"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 15,
                  "endLine": 363,
                  "endColumn": 20,
                  "charOffset": 10937,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "DS154189",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function",
            "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the `fopen` function is used, which can lead to vulnerabilities if the filename is not properly validated or controlled. An attacker could potentially manipulate the filename to overwrite important files or create new files in unintended locations.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions, or to perform proper input validation and error checking. In the case of `fopen`, it is important to validate and control the filename that is passed to the function. \n\n## Source Code Fix Recommendation\n\nA safer alternative to `fopen` in C++ is to use the `fstream` library, which provides the `ofstream` class for writing to files:\n\n```cpp\n#include <fstream>\n\nstd::ofstream file(filename);\nif (!file) {\n    // Handle error\n}\n```\n\nThis code will automatically handle errors that may occur when opening the file, and it does not have the same vulnerabilities as `fopen`.\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n* `cstdio` or `stdio.h` for `fopen`\n\nThe fixed code requires the following library:\n\n* `fstream`\n\n## References\n\n* [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n* [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bench/benchmark-blocking-sizes.cpp"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 15,
                  "endLine": 347,
                  "endColumn": 20,
                  "charOffset": 10228,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}